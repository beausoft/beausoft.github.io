<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beausoft Bolg</title>
  
  <subtitle>嘿嘿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://beausoft.github.io/"/>
  <updated>2018-03-06T15:01:26.471Z</updated>
  <id>https://beausoft.github.io/</id>
  
  <author>
    <name>呵呵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java List去掉重复对象</title>
    <link href="https://beausoft.github.io/2018/03/06/Java-List%E5%8E%BB%E6%8E%89%E9%87%8D%E5%A4%8D%E5%AF%B9%E8%B1%A1/"/>
    <id>https://beausoft.github.io/2018/03/06/Java-List去掉重复对象/</id>
    <published>2018-03-06T15:01:08.000Z</published>
    <updated>2018-03-06T15:01:26.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-去除List中重复的String"><a href="#一、-去除List中重复的String" class="headerlink" title="一、 去除List中重复的String"></a>一、 去除List中重复的String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">removeStringListDupli</span><span class="params">(List&lt;String&gt; stringList)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    set.addAll(stringList);</span><br><span class="line"></span><br><span class="line">    stringList.clear();</span><br><span class="line"></span><br><span class="line">    stringList.addAll(set);</span><br><span class="line">    <span class="keyword">return</span> stringList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或使用Java8的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; unique = list.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="二、-List中对象去重"><a href="#二、-List中对象去重" class="headerlink" title="二、 List中对象去重"></a>二、 List中对象去重</h3><p>比如现在有一个 Person类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写Person对象的equals()方法和hashCode()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    Person person = (Person) o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!id.equals(person.id)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> name.equals(person.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = id.hashCode();</span><br><span class="line">    result = <span class="number">31</span> * result + name.hashCode();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面对象去重的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1l</span>, <span class="string">"jack"</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">3l</span>, <span class="string">"jack chou"</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="number">2l</span>, <span class="string">"tom"</span>);</span><br><span class="line">Person p4 = <span class="keyword">new</span> Person(<span class="number">4l</span>, <span class="string">"hanson"</span>);</span><br><span class="line">Person p5 = <span class="keyword">new</span> Person(<span class="number">5l</span>, <span class="string">"胶布虫"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; persons = Arrays.asList(p1, p2, p3, p4, p5, p5, p1, p2, p2);</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line">persons.stream().forEach(</span><br><span class="line">p -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!personList.contains(p)) &#123;</span><br><span class="line">        personList.add(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">System.out.println(personList);</span><br></pre></td></tr></table></figure><p>List 的contains()方法底层实现使用对象的equals方法去比较的，其实重写equals()就好，但重写了equals最好将hashCode也重写了。</p><p>可以参见:<a href="http://stackoverflow.com/questions/30745048/how-to-remove-duplicate-objects-from-java-arraylist" target="_blank" rel="noopener">http://stackoverflow.com/questions/30745048/how-to-remove-duplicate-objects-from-java-arraylist</a><br><a href="http://blog.csdn.net/growing_tree/article/details/46622579" target="_blank" rel="noopener">http://blog.csdn.net/growing_tree/article/details/46622579</a></p><h3 id="三、根据对象的属性去重"><a href="#三、根据对象的属性去重" class="headerlink" title="三、根据对象的属性去重"></a>三、根据对象的属性去重</h3><p>下面要根据Person对象的id去重，那该怎么做呢？ 写一个方法吧:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">removeDupliById</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">    Set&lt;Person&gt; personSet = <span class="keyword">new</span> TreeSet&lt;&gt;((o1, o2) -&gt; o1.getId().compareTo(o2.getId()));</span><br><span class="line">        personSet.addAll(persons);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(personSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Comparator比较器，比较对象属性，相同就返回0，达到过滤的目的。</p><p>再来看比较炫酷的Java8写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Comparator.comparingLong;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.collectingAndThen;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id去重</span></span><br><span class="line">List&lt;Person&gt; unique = persons.stream().collect(</span><br><span class="line">    collectingAndThen(</span><br><span class="line">        toCollection(() -&gt; <span class="keyword">new</span> TreeSet&lt;&gt;(comparingLong(Person::getId))), ArrayList::<span class="keyword">new</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用TreeSet去做去重，排序采用comparing比较器</p><p>保存原来的顺序，使用LinkedHashSet即可，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; unique = persons.stream()..collect(Collectors.collectingAndThen(</span><br><span class="line">    Collectors.toCollection(()-&gt; <span class="keyword">new</span> LinkedHashSet&lt;&gt;()), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p>还有一种写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Object&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove duplicate</span></span><br><span class="line">persons.stream().filter(distinctByKey(p -&gt; p.getId())).forEach(p -&gt; System.out.println(p));</span><br></pre></td></tr></table></figure><p>java8 确实简化了很多冗长的操作，精简了代码，小伙，研究java8去吧！</p><p>参考: </p><p><a href="http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html" target="_blank" rel="noopener">http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html</a></p><p><a href="http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html" target="_blank" rel="noopener">http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html</a></p><p>来源:<a href="http://blog.csdn.net/jiaobuchong/article/details/54412094" target="_blank" rel="noopener">http://blog.csdn.net/jiaobuchong/article/details/54412094</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-去除List中重复的String&quot;&gt;&lt;a href=&quot;#一、-去除List中重复的String&quot; class=&quot;headerlink&quot; title=&quot;一、 去除List中重复的String&quot;&gt;&lt;/a&gt;一、 去除List中重复的String&lt;/h3&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java位运算</title>
    <link href="https://beausoft.github.io/2018/03/06/Java%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://beausoft.github.io/2018/03/06/Java位运算/</id>
    <published>2018-03-06T15:00:14.000Z</published>
    <updated>2018-03-06T15:00:35.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制与十进制间的转换方法"><a href="#二进制与十进制间的转换方法" class="headerlink" title="二进制与十进制间的转换方法"></a>二进制与十进制间的转换方法</h1><p>因为位运算是对二进制数进行操作，所以先来熟悉一下十进制与二进制之间的转换方法。</p><h2 id="正整数的十进制转换二进制"><a href="#正整数的十进制转换二进制" class="headerlink" title="正整数的十进制转换二进制"></a>正整数的十进制转换二进制</h2><p>要点：==除二取余，倒序排列==</p><p><strong>解释：将一个十进制数除以二，得到的商再除以二，依此类推直到商等于一或零时为止，倒取将除得的余数，即换算为二进制数的结果</strong></p><p>例如把52换算成二进制数，计算结果如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/yws/public/resource/3e0c5ba2ed083dcfc8db464ec38abe81/xmlnote/379E8D9D64234719B96FEE4A718A2F66/3079" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>52除以2得到的余数依次为：0、0、1、0、1、1，倒序排列，所以52对应的二进制数就是110100。<br>由于计算机内部表示数的字节单位都是定长的，以2的幂次展开，或者8位，或者16位，或者32位….。<br>于是，一个二进制数用计算机表示时，位数不足2的幂次时，高位上要补足若干个0。本文都以8位为例。那么：<br>(52)10=(00110100)2</p><h2 id="负整数转换为二进制"><a href="#负整数转换为二进制" class="headerlink" title="负整数转换为二进制"></a>负整数转换为二进制</h2><p>要点：==（正数除二取余，倒序排列）取反加一==</p><p><strong>解释：将该负整数对应的正整数先转换成二进制，然后对其“取补”，再对取补后的结果加1即可</strong></p><p>例如要把-52换算成二进制：</p><ol><li>先取得52的二进制：00110100</li><li>对所得到的二进制数取反：11001011</li><li>将取反后的数值加一即可：11001100<br>即：(-52)10=(11001100)2</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/yws/public/resource/3e0c5ba2ed083dcfc8db464ec38abe81/xmlnote/4CA808DFE284452CB35192E4E2670169/3081" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h2 id="小数转换为二进制"><a href="#小数转换为二进制" class="headerlink" title="小数转换为二进制"></a>小数转换为二进制</h2><p>要点：==（小数）乘二取整，正序排列==</p><p><strong>解释：对被转换的小数乘以2，取其整数部分(0或1)作为二进制小数部分，取其小数部分，再乘以2，又取其整数部分作为二进制小数部分，然后取小数部分，再乘以2，直到小数部分为0或者已经去到了足够位数。每次取的整数部分，按先后次序排列，就构成了二进制小数的序列</strong></p><p>例如把0.2转换为二进制，转换过程如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/yws/public/resource/3e0c5ba2ed083dcfc8db464ec38abe81/xmlnote/0549DB08D23840CD8FE15B66B0712306/3083" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>0.2乘以2，取整后小数部分再乘以2，运算4次后得到的整数部分依次为0、0、1、1，结果又变成了0.2，<br>若果0.2再乘以2后会循环刚开始的4次运算，所以0.2转换二进制后将是0011的循环，即：<br>(0.2)10=(0.0011 0011 0011 …..)2<br>循环的书写方法为在循环序列的第一位和最后一位分别加一个点标注</p><h2 id="二进制转换为十进制"><a href="#二进制转换为十进制" class="headerlink" title="二进制转换为十进制"></a>二进制转换为十进制</h2><p><strong>整数二进制用数值乘以2的幂次依次相加，小数二进制用数值乘以2的负幂次然后依次相加！</strong></p><p><strong>比如将二进制110转换为十进制：</strong></p><p><strong>首先补齐位数，00000110，首位为0，则为正整数，那么将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/yws/public/resource/3e0c5ba2ed083dcfc8db464ec38abe81/xmlnote/C11DAF8FB90E413A976D047A5A07360B/3085" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p><strong>如果二进制数补足位数之后首位为1，那么其对应的整数为负，那么需要先取反然后再换算</strong></p><p>比如11111001，首位为1，那么需要先对其取反，即：-00000110</p><p>00000110,对应的十进制为6，因此11111001对应的十进制即为-6</p><p>换算公式可表示为:</p><p>11111001=-00000110</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=-6</p><p><strong>如果将二进制0.110转换为十进制：</strong></p><p><strong>将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果</strong></p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>Java提供的位运算符有：左移( &lt;&lt; )、右移( &gt;&gt; ) 、无符号右移( &gt;&gt;&gt; ) 、位与( &amp; ) 、位或( | )、位非( ~ )、位异或( ^ )，除了位非( ~ )是一元操作符外，其它的都是二元操作符。</p><h2 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h2><p>移位运算符操作的对象就是二进制的位，可以单独用移位运算符来处理int型整数。</p><table><thead><tr><th>运算符</th><th>含义</th><th>例子 </th></tr></thead><tbody><tr><td>&lt;&lt;</td><td>左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）</td><td>x&lt;&lt;3</td></tr><tr><td>&gt;&gt;</td><td>“有符号”右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1.</td><td>x &gt;&gt;3</td></tr><tr><td>&gt;&gt;&gt;</td><td>“无符号”右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。采用0扩展机制，也就是说，无论值的正负，都在高位补0.</td><td>x&gt;&gt;&gt;3</td></tr></tbody></table><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/yws/public/resource/3e0c5ba2ed083dcfc8db464ec38abe81/xmlnote/6047F004EA3B43AFAB39683BA72E13A4/3163" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p>以int类型的6297为例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.toBinaryString(<span class="number">6297</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(-<span class="number">6297</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">6297</span>&gt;&gt;<span class="number">5</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(-<span class="number">6297</span>&gt;&gt;<span class="number">5</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">6297</span>&gt;&gt;&gt;<span class="number">5</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(-<span class="number">6297</span>&gt;&gt;&gt;<span class="number">5</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">6297</span>&lt;&lt;<span class="number">5</span>));   </span><br><span class="line">System.out.println(Integer.toBinaryString(-<span class="number">6297</span>&lt;&lt;<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>运行结果：</p><pre><code>1111111111111111111001110110011111000100111111111111111111111111001110111100010011111111111111111110011101111000100110010000011111111111111001110110011100000</code></pre><blockquote><p>注：x&lt;&lt;y 相当于 x*2y ；x&gt;&gt;y相当于x/2y<br>    从计算速度上讲，移位运算要比算术运算快。<br>    如果x是负数，那么x&gt;&gt;&gt;3没有什么算术意义，只有逻辑意义。</p></blockquote><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><ol><li>左移</li></ol><p>est1、将5左移2位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xcy;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果是20，但是程序是怎样执行的呢？</p><p>首先会将5转为2进制表示形式(java中，整数默认就是int类型,也就是32位):</p><p>0000 0000 0000 0000 0000 0000 0000 0101           然后左移2位后，低位补0：</p><p>0000 0000 0000 0000 0000 0000 0001 01==00==           换算成10进制为20</p><ol><li>右移( &gt;&gt; ) ，右移同理，只是方向不一样罢了(感觉和没说一样)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>&gt;&gt;<span class="number">2</span>);<span class="comment">//运行结果是1</span></span><br></pre></td></tr></table></figure><p>还是先将5转为2进制表示形式：</p><p>0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0：</p><p>==00==00 0000 0000 0000 0000 0000 0000 0001</p><ol><li>无符号右移( &gt;&gt;&gt; )</li></ol><p>我们知道在Java中int类型占32位，可以表示一个正数，也可以表示一个负数。正数换算成二进制后的最高位为0，负数的二进制最高为为1</p><p>例如  -5换算成二进制后为：</p><p>1111 1111 1111 1111 1111 1111 1111 1011   (刚开始接触二进制时，不知道最高位是用来表示正负之分的，当时就总想不通。。明明算起来得到的就是一个正数-_-)</p><p>我们分别对5进行右移3位、 -5进行右移3位和无符号右移3位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.xcy;  </span><br><span class="line">  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        System.out.println(5&gt;&gt;3);//结果是0  </span><br><span class="line">        System.out.println(-5&gt;&gt;3);//结果是-1  </span><br><span class="line">        System.out.println(-5&gt;&gt;&gt;3);//结果是536870911  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看它的移位过程(可以通过其结果换算成二进制进行对比)：</p><p>5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101</p><p>5右移3位后结果为0，0的二进制为： ==000==0 0000 0000 0000 0000 0000 0000 0000 // (==用0进行补位==)</p><p> -5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011</p><p> -5右移3位后结果为-1，-1的二进制为：<br>==111==1 1111 1111 1111 1111 1111 1111 1111   // (==用1进行补位==)</p><p> -5无符号右移3位后的结果 536870911 换算成二进制： </p><p>==000==1 1111 1111 1111 1111 1111 1111 1111   // (==用0进行补位==)</p><p>通过其结果转换成二进制后，我们可以发现，==正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了)==</p><blockquote><p>注意：笔者在这里说的是右移，高位补位的情况。正数或者负数左移，低位都是用0补。(自行测试)</p></blockquote><p>小技巧：</p><ol><li>&lt;&lt;&nbsp;：&nbsp;左移运算符，num &lt;&lt; 1,相当于num乘以2</li><li>&gt;&gt;&nbsp;：&nbsp;右移运算符，num &gt;&gt; 1,相当于num除以2</li><li>&gt;&gt;&gt;&nbsp;：&nbsp;无符号右移，忽略符号位，空位都以0补齐</li></ol><h2 id="与运算符"><a href="#与运算符" class="headerlink" title="与运算符"></a>与运算符</h2><p>与运算符用符号“&amp;”表示，其使用规律如下：</p><p>两个操作数中位都为1，结果才为1，否则结果为0，例如下面的程序段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">data13</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">129</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">128</span>;</span><br><span class="line">        System.out.println(<span class="string">"a 和b 与的结果是："</span>+(a&amp;b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a 和b 与的结果是：128下面分析这个程序：“a”的值是129，转换成二进制就是10000001，而“b”的值是128，转换成二进制就是10000000。根据与运算符的运算规律，只有两个位都是1，结果才是1，可以知道结果就是10000000，即128。</code></pre><h2 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符"></a>或运算符</h2><p>或运算符用符号“|”表示，其运算规律如下：</p><p>两个位只要有一个为1，那么结果就是1，否则就为0，下面看一个简单的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class data14</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        int a=129;</span><br><span class="line">        int b=128;</span><br><span class="line">        System.out.println(&quot;a 和b 或的结果是：&quot;+(a|b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a 和b 或的结果是：129下面分析这个程序段：a 的值是129，转换成二进制就是10000001，而b 的值是128，转换成二进制就是10000000，根据或运算符的运算规律，只有两个位有一个是1，结果才是1，可以知道结果就是10000001，即129。</code></pre><h2 id="异或运算符"><a href="#异或运算符" class="headerlink" title="异或运算符"></a>异或运算符</h2><p>异或运算符是用符号“^”表示的，其运算规律是：</p><p>两个操作数的位中，相同则结果为0，不同则结果为1。下面看一个简单的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class data16</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        int a=15;</span><br><span class="line">        int b=2;</span><br><span class="line">        System.out.println(&quot;a 与 b 异或的结果是：&quot;+(a^b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><pre><code>a 与 b 异或的结果是：13分析上面的程序段：a 的值是15，转换成二进制为1111，而b 的值是2，转换成二进制为0010，根据异或的运算规律，可以得出其结果为1101 即13。</code></pre><h2 id="非运算符"><a href="#非运算符" class="headerlink" title="非运算符"></a>非运算符</h2><p>非运算符用符号“~”表示，其运算规律如下：</p><p>如果位为0，结果是1，如果位为1，结果是0，下面看一个简单例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class data15</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        int a=2;</span><br><span class="line">        System.out.println(&quot;a 非的结果是：&quot;+(~a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java位运算相关技巧"><a href="#Java位运算相关技巧" class="headerlink" title="Java位运算相关技巧"></a>Java位运算相关技巧</h1><p>计算机所有的运算最终都是转换为位运算和移位的操作，效率也很高，在很多场合具有很强的技巧，所以做个总结供大家学习。</p><h2 id="交换a-b的值，不使用第三个变量？"><a href="#交换a-b的值，不使用第三个变量？" class="headerlink" title="交换a,b的值，不使用第三个变量？"></a>交换a,b的值，不使用第三个变量？</h2><p>通常使用第三个变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>,b=<span class="number">4</span>;  </span><br><span class="line"><span class="keyword">int</span> temp;  </span><br><span class="line">  </span><br><span class="line">temp=a；  </span><br><span class="line">a=b;  </span><br><span class="line">b=temp;</span><br></pre></td></tr></table></figure><h3 id="法一：【法一需要考虑a-b会不会超过a表达的数值范围，导致内存溢出】"><a href="#法一：【法一需要考虑a-b会不会超过a表达的数值范围，导致内存溢出】" class="headerlink" title="法一：【法一需要考虑a+b会不会超过a表达的数值范围，导致内存溢出】"></a>法一：【法一需要考虑a+b会不会超过a表达的数值范围，导致内存溢出】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a+b;  </span><br><span class="line">b=a-b;         <span class="comment">// 右边等价于a+b-b=====a  </span></span><br><span class="line">a=a-b;           <span class="comment">//此时b等于a,右边等价于a+b-a====b</span></span><br></pre></td></tr></table></figure><h3 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=a^b;  </span><br><span class="line">b=a^b; // 右边等价于a^b^b=====a  </span><br><span class="line">a=a^b; //此时b===a; 此式右边等于a^b^a=====b</span><br></pre></td></tr></table></figure><h2 id="实现一个函数，输入一个整数，输出为该整数的二进制表示有多少个1？"><a href="#实现一个函数，输入一个整数，输出为该整数的二进制表示有多少个1？" class="headerlink" title="实现一个函数，输入一个整数，输出为该整数的二进制表示有多少个1？"></a>实现一个函数，输入一个整数，输出为该整数的二进制表示有多少个1？</h2><h3 id="思路1：：判断该整数是否能被2整除，如果不能被2整除，则最后一位肯定为1，计数器加一，然后右移一位；"><a href="#思路1：：判断该整数是否能被2整除，如果不能被2整除，则最后一位肯定为1，计数器加一，然后右移一位；" class="headerlink" title="思路1：：判断该整数是否能被2整除，如果不能被2整除，则最后一位肯定为1，计数器加一，然后右移一位；"></a>思路1：：判断该整数是否能被2整除，如果不能被2整除，则最后一位肯定为1，计数器加一，然后右移一位；</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Numberof1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">while</span>(n)&#123;  </span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>) <span class="comment">// if(n%2==1)  </span></span><br><span class="line">count++;  </span><br><span class="line">  </span><br><span class="line">n=n&gt;&gt;<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> count；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题：如果把移位改为除以2，那样效率又太低，如果输入时一个负数，0x8000 0000右边移动一位，变为0xC000 0000 。而不等价于理想的右移动一位的时候相当于除以2，得0x4000 0000。这样最终就会都变为1，引起死循环；</p><h3 id="思路2：思路1中右移n可能会导致是负数的时候造成死循环。那么我们改进，每次左移1"><a href="#思路2：思路1中右移n可能会导致是负数的时候造成死循环。那么我们改进，每次左移1" class="headerlink" title="思路2：思路1中右移n可能会导致是负数的时候造成死循环。那么我们改进，每次左移1."></a>思路2：思路1中右移n可能会导致是负数的时候造成死循环。那么我们改进，每次左移1.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Numberof1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;  </span><br><span class="line">unsigned <span class="keyword">int</span> flag=<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span>(flag)&#123;  </span><br><span class="line"><span class="keyword">if</span>(n&amp;flag) <span class="comment">// 判断某位是否为1  </span></span><br><span class="line">count++;  </span><br><span class="line">  </span><br><span class="line">flag=flag&lt;&lt;<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> count；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路3：-n-1-amp-n相当于把n的最右边一个1变为0；"><a href="#思路3：-n-1-amp-n相当于把n的最右边一个1变为0；" class="headerlink" title="思路3： (n-1)&amp;n相当于把n的最右边一个1变为0；"></a>思路3： (n-1)&amp;n相当于把n的最右边一个1变为0；</h3><p>n-1:相当于把最右边的1变为0，左边保持不变，该1右边的0变为1；10100—减1—&gt;10011</p><p>(n-1)&amp;n：10100—&amp;—10011————&gt; 10 000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Numberof1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">while</span>(n)&#123;  </span><br><span class="line">count++;  </span><br><span class="line">n=(n-<span class="number">1</span>) &amp;&amp; n;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> count；  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个函数不用加减乘除求两个数的和"><a href="#实现一个函数不用加减乘除求两个数的和" class="headerlink" title="实现一个函数不用加减乘除求两个数的和"></a>实现一个函数不用加减乘除求两个数的和</h2><p>思路：num1^num2:相当于只做加法不做进位（不同为1，相同为0，此时都为1的二进制位没有进位）；</p><p>num1&amp;num2&lt;&lt;1:相当于进位（都为1，才为1.左移1位）</p><p>把上面两步相加，反复迭代即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> sum,carray;  </span><br><span class="line"><span class="keyword">do</span>&#123;  </span><br><span class="line">sum=num1^num2;  </span><br><span class="line">carray=num1&amp;num2&lt;&lt;<span class="number">1</span>;  </span><br><span class="line">num1=sum;  </span><br><span class="line">num2=carray;  </span><br><span class="line">&#125;<span class="keyword">while</span>(num2!=<span class="number">0</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断一个数是不是2的整数次方？"><a href="#判断一个数是不是2的整数次方？" class="headerlink" title="判断一个数是不是2的整数次方？"></a>判断一个数是不是2的整数次方？</h2><p>思路：如果一个数是2的整数次方，那么这个数的二进制表示中有且仅有一位为1. (n-1)&amp;n那么这个数唯一的一个1就会变为0；(n-1)&amp;n==0 就是2的整数次方。</p><h2 id="两个整数m-n-改变多少位二进制表示才能从m变为n"><a href="#两个整数m-n-改变多少位二进制表示才能从m变为n" class="headerlink" title="两个整数m,n,改变多少位二进制表示才能从m变为n."></a>两个整数m,n,改变多少位二进制表示才能从m变为n.</h2><p>思路：求异或，然后求异或中有多少个1.</p><h2 id="一个整形数组里面除了两个数字，其他数字都出现了两次，找出只出现了一次的两个数字。时间复杂O-n-空间O-1"><a href="#一个整形数组里面除了两个数字，其他数字都出现了两次，找出只出现了一次的两个数字。时间复杂O-n-空间O-1" class="headerlink" title="一个整形数组里面除了两个数字，其他数字都出现了两次，找出只出现了一次的两个数字。时间复杂O(n),空间O(1)"></a>一个整形数组里面除了两个数字，其他数字都出现了两次，找出只出现了一次的两个数字。时间复杂O(n),空间O(1)</h2><p>思路：如果只有一个数字是只出现了一次，其他数字都出现了两次，那么只需要异或数组中的的所有元素，最后得到的值就是那个只出现一次的数字，出现偶数次的数字都被异或得0了。a^a==0。现在是两个只出现了一次的数字，那么想办法分组，每个组里面包含一个只出现一次的数字，要保证其他一样的数字出现在同一个组里。</p><p>首先异或数组里面所有的数字得到一个结果值。由于有两个数字只出现了一次，其他数字异或抵消掉了，这两个不同的数字异或结果不等于0，结果的二进制表示中肯定至少有一位为1.我们找该结果的第一个为1的位置。这两个只出现一次的数字，肯定该对应位一个为1，一个为0.我们依据每个元素该位置是否为1分为两组，这2个不同的只出现一次的数字就被分到两个组里，数字出现两次的数字由于一样肯定会被分到同一个组里。最后，分别异或两个组，得到两个数字就是唯一出现一次的两个不同的数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findNumAppearOne</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;  </span><br><span class="line"><span class="keyword">if</span>(a==<span class="keyword">null</span> || a.length&lt;<span class="number">2</span>)  </span><br><span class="line"><span class="keyword">return</span> ;  </span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a) sum^=i;  </span><br><span class="line"><span class="keyword">int</span> index=findFirstBitIs1(sum); <span class="comment">//发现第一个为1的位置；  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> sum1=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">int</span> sum2=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a)&#123;  </span><br><span class="line"><span class="keyword">if</span>(isBit1(i,index)) <span class="comment">//判断i的index位置是不是1；  </span></span><br><span class="line">sum1^=i;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">sum2^=i;  </span><br><span class="line">&#125;  </span><br><span class="line">System.out.println(sum1);  </span><br><span class="line">System.out.println(sum2);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findFirstBitIs1</span><span class="params">(<span class="keyword">int</span> sum)</span></span>&#123;<span class="comment">//判断从右往左的第n位置是不是1，是1返回。  </span></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">while</span>((sum&amp;<span class="number">1</span>)==<span class="number">0</span>)&#123;  </span><br><span class="line">sum=sum&gt;&gt;<span class="number">1</span>;  </span><br><span class="line">index++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> index;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> booleam <span class="title">isBit1</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> index)</span></span>&#123;  </span><br><span class="line">i=i&gt;&gt;index;  </span><br><span class="line"><span class="keyword">return</span> (i&amp;<span class="number">1</span>)==<span class="number">0</span> ;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考来源：</p><ol><li><a href="http://www.cnblogs.com/qqzy168/p/3626090.html" target="_blank" rel="noopener">二进制与十进制间的转换方法(图文教程)</a></li><li><a href="http://blog.csdn.net/xiaochunyong/article/details/7748713" target="_blank" rel="noopener">Java 位运算(移位、位与、或、异或、非）</a></li><li><a href="http://blog.csdn.net/a784586/article/details/61419598" target="_blank" rel="noopener">与位运算相关的编程算法技巧的总结java实现</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二进制与十进制间的转换方法&quot;&gt;&lt;a href=&quot;#二进制与十进制间的转换方法&quot; class=&quot;headerlink&quot; title=&quot;二进制与十进制间的转换方法&quot;&gt;&lt;/a&gt;二进制与十进制间的转换方法&lt;/h1&gt;&lt;p&gt;因为位运算是对二进制数进行操作，所以先来熟悉一下十进
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用BigDecimal进行精确运算</title>
    <link href="https://beausoft.github.io/2018/03/06/%E4%BD%BF%E7%94%A8BigDecimal%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%A1%AE%E8%BF%90%E7%AE%97/"/>
    <id>https://beausoft.github.io/2018/03/06/使用BigDecimal进行精确运算/</id>
    <published>2018-03-06T14:59:07.000Z</published>
    <updated>2018-03-06T14:59:25.982Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们先来看如下代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">0.06</span>+<span class="number">0.01</span>);</span><br><span class="line">        System.out.println(<span class="number">1.0</span>-<span class="number">0.42</span>);</span><br><span class="line">        System.out.println(<span class="number">4.015</span>*<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="number">303.1</span>/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><pre><code>0.069999999999999990.5800000000000001401.499999999999940.30310000000000004</code></pre><p>你认为你看错了，但结果却是是这样的。问题在哪里呢？原因在于我们的计算机是二进制的。浮点数没有办法是用二进制进行精确表示。我们的CPU表示浮点数由两个部分组成：指数和尾数，这样的表示方法一般都会失去一定的精确度，有些浮点数运算也会产生一定的误差。如：2.4的二进制表示并非就是精确的2.4。反而最为接近的二进制表示是 2.3999999999999999。浮点数的值实际上是由一个特定的数学公式计算得到的。</p><p>其实java的float只能用来进行科学计算或工程计算，在大多数的商业计算中，一般采用java.math.BigDecimal类来进行精确计算。</p><p>在使用BigDecimal类来进行计算的时候，主要分为以下步骤：</p><ol><li><p>用float或者double变量构建BigDecimal对象。</p></li><li><p>通过调用BigDecimal的加，减，乘，除等相应的方法进行算术运算。</p></li><li><p>把BigDecimal对象转换成float，double，int等类型。</p></li></ol><p>一般来说，可以使用BigDecimal的构造方法或者静态方法的valueOf()方法把基本类型的变量构建成BigDecimal对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BigDecimal b1 = new BigDecimal(Double.toString(0.48));</span></span><br><span class="line">BigDecimal b2 = BigDecimal.valueOf(<span class="number">0.48</span>);</span><br></pre></td></tr></table></figure><p>对于常用的加，减，乘，除，BigDecimal类提供了相应的成员方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal value)</span></span>;  <span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal value)</span></span>; <span class="comment">//减法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal value)</span></span>; <span class="comment">//乘法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal value)</span></span>; <span class="comment">//除法</span></span><br></pre></td></tr></table></figure><p>进行相应的计算后，我们可能需要将BigDecimal对象转换成相应的基本数据类型的变量，可以使用floatValue()，doubleValue()等方法。</p><p><strong><em>注意：</em></strong></p><p>这里有个陷阱，当你使用new BigDecimal(Double d) 时，得到的BigDecimal中的long值并不是精确，详情可查源码，可追溯到native long doubleToRawLongBits(double value)；<br>这时使用new BigDecimal(String s)得到的即准确值，用于计算不会出现误差</p><p><strong>BigDecimal对小数的处理：</strong></p><p>BigDecimal.setScale()方法用于格式化小数点：</p><p>setScale(1)表示保留一位小数，默认用四舍五入的方式</p><p>setScale(1,BigDecimal.ROUND_DOWN)直接删除多余的小数位，如2.35会变成2.3</p><p>setScale(1,BigDecimal.ROUND_UP)进位处理，2.35变成2.4</p><p>setScale(1,BigDecimal.ROUND_HALF_UP)四舍五入，2.35变成2.4</p><p>setScale(1,BigDecimal.ROUND_HALF_DOWN)四舍五入，2.35变成2.3，如果是5则向下舍</p><p>scale指的是小数位后的位数，比如123.456的scale为3； </p><p>==scale是BigDecimal类中的方法：==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"123.456"</span>);</span><br><span class="line">b.scale();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>==roundingMode==是小数的保留模式。它们都是BigDecimal中的常量字段,有很多种，示例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BigDecimal(Double.parseDouble(succRate) / <span class="number">24</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line"><span class="keyword">new</span> BigDecimal(svcSuccData.get(<span class="string">"succRate"</span>).toString()).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).toString()</span><br></pre></td></tr></table></figure><p>参考来源：</p><ol><li><a href="https://www.cnblogs.com/chenssy/archive/2012/09/09/2677279.html" target="_blank" rel="noopener">使用BigDecimal进行精确运算</a></li><li><a href="http://blog.csdn.net/lmb55/article/details/50253429" target="_blank" rel="noopener">BigDecimal.setScale 处理java小数点</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们先来看如下代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Math各个函数</title>
    <link href="https://beausoft.github.io/2018/03/06/Math%E5%90%84%E4%B8%AA%E5%87%BD%E6%95%B0/"/>
    <id>https://beausoft.github.io/2018/03/06/Math各个函数/</id>
    <published>2018-03-06T14:58:25.000Z</published>
    <updated>2018-03-06T14:58:48.891Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Math-E"><a href="#Math-E" class="headerlink" title="Math.E"></a>Math.E</h4><p>常量，比任何其他值都更接近 e（即自然对数的底数）的 double 值。</p><h4 id="Math-PI"><a href="#Math-PI" class="headerlink" title="Math.PI"></a>Math.PI</h4><p>常量，比任何其他值都更接近 pi（即圆的周长与直径之比）的 double 值。 </p><h4 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random"></a>Math.random</h4><p>返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。返回值是一个伪随机选择的数，在该范围内（近似）均匀分布。</p><p>第一次调用该方法时，它将创建一个新的伪随机数生成器，与以下表达式完全相同</p><p>new java.util.Random</p><p>之后，新的伪随机数生成器可用于此方法的所有调用，但不能用于其他地方。</p><p>此方法是完全同步的，可允许多个线程使用而不出现错误。但是，如果许多线程需要以极高的速率生成伪随机数，那么这可能会减少每个线程对拥有自己伪随机数生成器的争用。</p><h4 id="Math-max"><a href="#Math-max" class="headerlink" title="Math.max"></a>Math.max</h4><p>返回两个 int 值中较大的一个。也就是说，结果为更接近 Integer.MAX_VALUE 值的参数。如果参数值相同，那么结果也是同一个值。</p><h4 id="Math-min"><a href="#Math-min" class="headerlink" title="Math.min"></a>Math.min</h4><p>返回两个 long 值中较大的一个。也就是说，结果为更接近 Long.MAX_VALUE 值的参数。如果参数值相同，那么结果也是同一个值。</p><h4 id="Math-abs"><a href="#Math-abs" class="headerlink" title="Math.abs"></a>Math.abs</h4><p>返回 int 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。</p><p>注意，如果参数等于 Integer.MIN_VALUE 的值（即能够表示的最小负 int 值），那么结果与该值相同且为负。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.abs(-<span class="number">10</span>);<span class="comment">//输出10</span></span><br></pre></td></tr></table></figure><h4 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor"></a>Math.floor</h4><p><em>向下取整</em></p><p>round 则是4舍5入的计算，round方法，它表示“四舍五入”，算法为Math.floor(x+0.5)，即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(<span class="number">2</span>);<span class="comment">//=2</span></span><br><span class="line">Math.floor(<span class="number">2.1</span>);<span class="comment">//=2</span></span><br><span class="line">Math.floor(-<span class="number">2.1</span>);<span class="comment">//=-3</span></span><br><span class="line">Math.floor(-<span class="number">2.5</span>);<span class="comment">//=-3</span></span><br><span class="line">Math.floor(-<span class="number">2.9</span>);<span class="comment">//=-3</span></span><br></pre></td></tr></table></figure><h4 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil"></a>Math.ceil</h4><p><em>向上取整</em></p><p>返回最小的（最接近负无穷大） double 值，该值大于等于参数，并等于某个整数。特殊情况如下：</p><ul><li>如果参数值已经等于某个整数，那么结果与该参数相同。</li><li>如果参数为 NaN、无穷大、正 0 或负 0，那么结果与参数相同。</li><li>如果参数值小于 0，但是大于 -1.0，那么结果为负 0。</li></ul><p>注意， Math.ceil(x) 的值与 -Math.floor(-x) 的值完全相同。</p><p>返回最小（最接近负无穷大）浮点值，该值大于等于该参数，并等于某个整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Math.ceil(<span class="number">2</span>);<span class="comment">//=2</span></span><br><span class="line">Math.ceil(<span class="number">2.1</span>);<span class="comment">//=3</span></span><br><span class="line">Math.ceil(<span class="number">2.5</span>);<span class="comment">//=3</span></span><br><span class="line">Math.ceil(<span class="number">2.9</span>);<span class="comment">//=3</span></span><br></pre></td></tr></table></figure><h4 id="Math-rint"><a href="#Math-rint" class="headerlink" title="Math.rint"></a>Math.rint</h4><p><em>返回其值最接近参数并且是整数的 double 值。</em></p><p>返回double值最接近参数的值，并等于某个整数。如果两个double值跟整数都同样接近，结果是整数值是偶数。特殊情况：</p><p>如果参数值已经等于某个整数，那么结果跟参数一样。</p><p>如果参数为NaN或无穷大，正零或负零，那么结果和参数一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.rint(<span class="number">1654.9874</span>);<span class="comment">//=1655.0</span></span><br><span class="line">Math.rint(-<span class="number">9765.134</span>);<span class="comment">//=-9765.0</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Math.rint(<span class="number">2</span>);<span class="comment">//=2</span></span><br><span class="line">Math.rint(<span class="number">2.1</span>);<span class="comment">//=2</span></span><br><span class="line">Math.rint(-<span class="number">2.5</span>);<span class="comment">//=-2</span></span><br><span class="line">Math.rint(<span class="number">2.5</span>);<span class="comment">//=2</span></span><br><span class="line">Math.rint(<span class="number">2.9</span>);<span class="comment">//=3</span></span><br><span class="line">Math.rint(-<span class="number">2.9</span>);<span class="comment">//=-3</span></span><br><span class="line">Math.rint(-<span class="number">2.49</span>);<span class="comment">//=-2</span></span><br><span class="line">Math.rint(-<span class="number">2.51</span>);<span class="comment">//=-3</span></span><br></pre></td></tr></table></figure><h4 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round"></a>Math.round</h4><p><em>特殊的四舍五入</em></p><p>返回最接近参数的 long。结果将舍入为整数：加上 1/2，对结果调用 floor 并将所得结果强制转换为 long 类型。换句话说，结果等于以下表达式的值：</p><p>(long)Math.floor(a + 0.5d)</p><p>特殊情况如下：</p><ul><li>如果参数为 NaN，那么结果为 0。</li><li>如果结果为负无穷大或任何小于等于 Long.MIN_VALUE 的值，那么结果等于 Long.MIN_VALUE 的值。</li><li>如果参数为正无穷大或任何大于等于 Long.MAX_VALUE 的值，那么结果等于 Long.MAX_VALUE 的值。</li></ul><p>返回舍入为最接近的 long 值的参数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Math.round(<span class="number">3.14</span>);<span class="comment">//3</span></span><br><span class="line">Math.round(<span class="number">3.5</span>);<span class="comment">//4</span></span><br><span class="line">Math.round(-<span class="number">3.14</span>);<span class="comment">//-3</span></span><br><span class="line">Math.round(-<span class="number">3.5</span>);<span class="comment">//-3</span></span><br></pre></td></tr></table></figure><p>还有一个问题就是==奇进偶舍==的原则</p><p>今天客户跑过来跟我说，我们程序里面计算的价格不对，我检查了一下，发现价格是经过折算后的价格，结果是可能小数位较多，而单据上只能打印两位价格，所以就对价格调用Math.Round(price,2)函数进行四舍五入。</p><p>而出现问题的单价就是1.805，函数Math.Round(1.805,2)的返回值却是1.80，按照四舍五入的原则，结果应该是1.81才对。</p><p>在一番google之后，发现微软是对了，是我们错了。</p><p>原来四舍五入也有个国际惯例，叫奇进偶舍，意思是当舍入位前面一位是奇数时，就进，为偶数时，就舍，这也是体现公平性的原理。</p><p>可是国际惯例往往在国内很多企业行不通，为了应付他们的要求，采用Math.Round(price,2,MidpointRounding.AwayFromZero)就可以了。</p><h4 id="Math-copySign"><a href="#Math-copySign" class="headerlink" title="Math.copySign"></a>Math.copySign</h4><p><em>copySign(x,y) 返回 用y的符号取代x的符号后新的x值</em></p><p>返回带有第二个浮点参数符号的第一个浮点参数。注意，与 StrictMath.copySign 方法不同，此方法不要求将 NaN sign 参数视为正值；允许实现将某些 NaN 参数视为正，将另一些视为负，以获得更好的性能。</p><p>参数：</p><ul><li>magnitude - 提供结果数值的参数</li><li>sign - 提供结果符号的参数</li></ul><p>返回：</p><p>一个值，带有 magnitude 的数值， sign 的符号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.copySign(-<span class="number">1.0</span>, <span class="number">2.0</span>);<span class="comment">//输出1.0  </span></span><br><span class="line">Math.copySign(<span class="number">2.0</span>, -<span class="number">1.0</span>);<span class="comment">//输出-2.0</span></span><br></pre></td></tr></table></figure><h4 id="Math-nextAfter"><a href="#Math-nextAfter" class="headerlink" title="Math.nextAfter"></a>Math.nextAfter</h4><p><em>nextAfter(a,b) 返回(a,b)或(b,a)间与a相邻的浮点数 b可以比a小</em></p><p>返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。如果两个参数比较起来相等，则返回第二个参数。</p><p>特殊情况如下：</p><ul><li>如果任一参数为 NaN，则返回 NaN。</li><li>如果两个参数都为有符号的 0，则不做更改地返回 direction（根据要求，如果参数比较起来相等，将返回第二个参数）。</li><li>如果 start 为 ±Double.MIN_VALUE，而 direction 的值要求结果为一个比 start 小的数值，那么将返回 0，并带有与 start 相同的符号。</li><li>如果 start 为无穷大，而 direction 的值要求结果为一个比 start 小的数值，则返回 Double.MAX_VALUE，并带有与 start 相同的符号。</li><li>如果 start 等于 ±Double.MAX_VALUE，而 direction 的值要求结果为一个比 start 大的数值，则返回无穷大，并带有与 start 相同的符号。</li></ul><p>参数：</p><ul><li>start - 起始浮点值。</li><li>direction - 一个值，指示应返回 start 的某个邻数还是 start。</li></ul><p>返回：</p><p>start 和 direction 之间与 start 相邻的浮点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.nextAfter(<span class="number">1.2</span>, <span class="number">2.7</span>);<span class="comment">//输出1.2000000000000002  </span></span><br><span class="line">Math.nextAfter(<span class="number">1.2</span>, -<span class="number">1</span>);<span class="comment">//输出1.1999999999999997</span></span><br></pre></td></tr></table></figure><p><em>所以这里的b是控制条件</em></p><h4 id="Math-nextUp"><a href="#Math-nextUp" class="headerlink" title="Math.nextUp"></a>Math.nextUp</h4><p><em>nextUp(a) 返回比a大一点点的浮点数</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.nextUp(<span class="number">1.2</span>);<span class="comment">//输出1.2000000000000002</span></span><br></pre></td></tr></table></figure><p>返回 d 和正无穷大之间与 d 相邻的浮点值。此方法在语义上等同于 nextAfter(d, Double.POSITIVE_INFINITY)；但是， nextUp 实现的返回速度可能比其等价 nextAfter 调用快。</p><p>特殊情况如下：</p><ul><li>如果参数为 NaN，那么结果为 NaN。</li><li>如果参数为正无穷大，那么结果为正无穷大。</li><li>如果参数为 0，那么结果为 Double.MIN_VALUE。</li></ul><p>参数：</p><p>d - 起始浮点值。</p><p>返回：</p><p>离正无穷大较近的相邻浮点值。</p><h4 id="Math-nextDown"><a href="#Math-nextDown" class="headerlink" title="Math.nextDown"></a>Math.nextDown</h4><p><em>nextDown(a) 返回比a小一点点的浮点数</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.nextDown(<span class="number">1.2</span>);<span class="comment">//输出1.1999999999999997</span></span><br></pre></td></tr></table></figure><h3 id="三角函数与反三角函数"><a href="#三角函数与反三角函数" class="headerlink" title="三角函数与反三角函数"></a>三角函数与反三角函数</h3><p>cos求余弦</p><p>sin求正弦</p><p>tan求正切</p><p>acos求反余弦</p><p>asin求反正弦</p><p>atan求反正切</p><p>atan2(y,x)求向量(x,y)与x轴夹角</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.acos(-<span class="number">1.0</span>);<span class="comment">//输出圆周率3.14...  </span></span><br><span class="line">Math.atan2(<span class="number">1.0</span>, <span class="number">1.0</span>);<span class="comment">//输出 π/4 的小数值</span></span><br></pre></td></tr></table></figure><h3 id="开根号"><a href="#开根号" class="headerlink" title="开根号"></a>开根号</h3><p>cbrt(x)开立方 </p><p>sqrt(x)开平方 </p><p>hypot(x,y)求sqrt(x*x+y*y)在求两点间距离时有用sqrt((x1-x2)^2+(y1-y2)^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.sqrt(<span class="number">4.0</span>);<span class="comment">//输出2.0  </span></span><br><span class="line">Math.cbrt(<span class="number">8.0</span>);<span class="comment">//输出2.0  </span></span><br><span class="line">Math.hypot(<span class="number">3.0</span>, <span class="number">4.0</span>);<span class="comment">//输出5.0</span></span><br></pre></td></tr></table></figure><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h3><p>log(a) a的自然对数(底数是e)</p><p>log10(a) a 的底数为10的对数</p><p>log1p(a) a+1的自然对数</p><p>值得注意的是，前面其他函数都有重载，对数运算的函数只能传double型数据并返回double型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.log(Math.E);<span class="comment">//输出1.0  </span></span><br><span class="line">Math.log10(<span class="number">10</span>);<span class="comment">//输出1.0  </span></span><br><span class="line">Math.log1p(Math.E-<span class="number">1.0</span>);<span class="comment">//输出1.0</span></span><br></pre></td></tr></table></figure><h3 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h3><p>exp(x) 返回e^x的值</p><p>expm1(x) 返回e^x - 1的值</p><p>pow(x,y) 返回x^y的值</p><p>这里可用的数据类型也只有double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.exp(<span class="number">2</span>);<span class="comment">//输出E^2的值  </span></span><br><span class="line">Math.pow(<span class="number">2.0</span>, <span class="number">3.0</span>);<span class="comment">//输出8.0</span></span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>toDegrees(a) 弧度换角度 </p><p>toRadians(a) 角度换弧度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.toDegrees(Math.PI);<span class="comment">//输出180.0  </span></span><br><span class="line">Math.toRadians(<span class="number">180</span>);<span class="comment">//输出 π 的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Math-E&quot;&gt;&lt;a href=&quot;#Math-E&quot; class=&quot;headerlink&quot; title=&quot;Math.E&quot;&gt;&lt;/a&gt;Math.E&lt;/h4&gt;&lt;p&gt;常量，比任何其他值都更接近 e（即自然对数的底数）的 double 值。&lt;/p&gt;
&lt;h4 id=&quot;Math-
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中树和树的几种常规遍历方法</title>
    <link href="https://beausoft.github.io/2018/03/06/Java%E4%B8%AD%E6%A0%91%E5%92%8C%E6%A0%91%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%84%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <id>https://beausoft.github.io/2018/03/06/Java中树和树的几种常规遍历方法/</id>
    <published>2018-03-06T14:50:33.000Z</published>
    <updated>2018-03-06T14:51:30.992Z</updated>
    
    <content type="html"><![CDATA[<p>其中包含有先序遍历、中序遍历、后序遍历以及广度优先遍历四种遍历树的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line">package com.ietree.basic.datastructure.tree.binarytree;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayDeque;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Queue;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by ietree</span><br><span class="line"> * 2017/5/1</span><br><span class="line"> */</span><br><span class="line">public class ThreeLinkBinTree&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public static class TreeNode &#123;</span><br><span class="line"></span><br><span class="line">        Object data;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode parent;</span><br><span class="line"></span><br><span class="line">        public TreeNode() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public TreeNode(Object data) &#123;</span><br><span class="line">            this.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public TreeNode(Object data, TreeNode left, TreeNode right, TreeNode parent) &#123;</span><br><span class="line">            this.data = data;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">            this.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private TreeNode root;</span><br><span class="line"></span><br><span class="line">    // 以默认的构造器创建二叉树</span><br><span class="line">    public ThreeLinkBinTree() &#123;</span><br><span class="line">        this.root = new TreeNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 以指定根元素创建二叉树</span><br><span class="line">    public ThreeLinkBinTree(E data) &#123;</span><br><span class="line">        this.root = new TreeNode(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 为指定节点添加子节点</span><br><span class="line">     *</span><br><span class="line">     * @param parent 需要添加子节点的父节点的索引</span><br><span class="line">     * @param data   新子节点的数据</span><br><span class="line">     * @param isLeft 是否为左节点</span><br><span class="line">     * @return 新增的节点</span><br><span class="line">     */</span><br><span class="line">    public TreeNode addNode(TreeNode parent, E data, boolean isLeft) &#123;</span><br><span class="line"></span><br><span class="line">        if (parent == null) &#123;</span><br><span class="line">            throw new RuntimeException(parent + &quot;节点为null， 无法添加子节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (isLeft &amp;&amp; parent.left != null) &#123;</span><br><span class="line">            throw new RuntimeException(parent + &quot;节点已有左子节点，无法添加左子节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!isLeft &amp;&amp; parent.right != null) &#123;</span><br><span class="line">            throw new RuntimeException(parent + &quot;节点已有右子节点，无法添加右子节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode newNode = new TreeNode(data);</span><br><span class="line">        if (isLeft) &#123;</span><br><span class="line">            // 让父节点的left引用指向新节点</span><br><span class="line">            parent.left = newNode;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 让父节点的left引用指向新节点</span><br><span class="line">            parent.right = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        // 让新节点的parent引用到parent节点</span><br><span class="line">        newNode.parent = parent;</span><br><span class="line">        return newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断二叉树是否为空</span><br><span class="line">    public boolean empty() &#123;</span><br><span class="line">        // 根据元素判断二叉树是否为空</span><br><span class="line">        return root.data == null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回根节点</span><br><span class="line">    public TreeNode root() &#123;</span><br><span class="line">        if (empty()) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;树为空，无法访问根节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回指定节点（非根节点）的父节点</span><br><span class="line">    public E parent(TreeNode node) &#123;</span><br><span class="line">        if (node == null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;节点为null，无法访问其父节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return (E) node.parent.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null</span><br><span class="line">    public E leftChild(TreeNode parent) &#123;</span><br><span class="line">        if (parent == null) &#123;</span><br><span class="line">            throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent.left == null ? null : (E) parent.left.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null</span><br><span class="line">    public E rightChild(TreeNode parent) &#123;</span><br><span class="line">        if (parent == null) &#123;</span><br><span class="line">            throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent.right == null ? null : (E) parent.right.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 返回该二叉树的深度</span><br><span class="line">    public int deep() &#123;</span><br><span class="line">        // 获取该树的深度</span><br><span class="line">        return deep(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 这是一个递归方法：每一棵子树的深度为其所有子树的最大深度 + 1</span><br><span class="line">    private int deep(TreeNode node) &#123;</span><br><span class="line">        if (node == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        // 没有子树</span><br><span class="line">        if (node.left == null &amp;&amp; node.right == null) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int leftDeep = deep(node.left);</span><br><span class="line">            int rightDeep = deep(node.right);</span><br><span class="line">            // 记录其所有左、右子树中较大的深度</span><br><span class="line">            int max = leftDeep &gt; rightDeep ? leftDeep : rightDeep;</span><br><span class="line">            // 返回其左右子树中较大的深度 + 1</span><br><span class="line">            return max + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现先序遍历</span><br><span class="line">    // 1、访问根节点</span><br><span class="line">    // 2、递归遍历左子树</span><br><span class="line">    // 3、递归遍历右子树</span><br><span class="line">    public List&lt;TreeNode&gt; preIterator() &#123;</span><br><span class="line">        return preIterator(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;TreeNode&gt; preIterator(TreeNode node) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        // 处理根节点</span><br><span class="line">        list.add(node);</span><br><span class="line"></span><br><span class="line">        // 递归处理左子树</span><br><span class="line">        if (node.left != null) &#123;</span><br><span class="line">            list.addAll(preIterator(node.left));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 递归处理右子树</span><br><span class="line">        if (node.right != null) &#123;</span><br><span class="line">            list.addAll(preIterator(node.right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现中序遍历</span><br><span class="line">    // 1、递归遍历左子树</span><br><span class="line">    // 2、访问根节点</span><br><span class="line">    // 3、递归遍历右子树</span><br><span class="line">    public List&lt;TreeNode&gt; inIterator() &#123;</span><br><span class="line">        return inIterator(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;TreeNode&gt; inIterator(TreeNode node) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">        // 递归处理左子树</span><br><span class="line">        if (node.left != null) &#123;</span><br><span class="line">            list.addAll(inIterator(node.left));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理根节点</span><br><span class="line">        list.add(node);</span><br><span class="line"></span><br><span class="line">        // 递归处理右子树</span><br><span class="line">        if (node.right != null) &#123;</span><br><span class="line">            list.addAll(inIterator(node.right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现后序遍历</span><br><span class="line">    // 1、递归遍历左子树</span><br><span class="line">    // 2、递归遍历右子树</span><br><span class="line">    // 3、访问根节点</span><br><span class="line">    public List&lt;TreeNode&gt; postIterator() &#123;</span><br><span class="line">        return postIterator(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List&lt;TreeNode&gt; postIterator(TreeNode node) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;();</span><br><span class="line"></span><br><span class="line">        // 递归处理左子树</span><br><span class="line">        if (node.left != null) &#123;</span><br><span class="line">            list.addAll(postIterator(node.left));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 递归处理右子树</span><br><span class="line">        if (node.right != null) &#123;</span><br><span class="line">            list.addAll(postIterator(node.right));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 处理根节点</span><br><span class="line">        list.add(node);</span><br><span class="line"></span><br><span class="line">        return list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 实现广度优先遍历</span><br><span class="line">    // 广度优先遍历又称为按层遍历，整个遍历算法先遍历二叉树的第一层（根节点），再遍历根节点的两个子节点（第二层），以此类推</span><br><span class="line">    public List&lt;TreeNode&gt; breadthFirst() &#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new ArrayDeque&lt;TreeNode&gt;();</span><br><span class="line">        List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        if (root != null) &#123;</span><br><span class="line">            // 将根元素加入“队列”</span><br><span class="line">            queue.offer(root);</span><br><span class="line">        &#125;</span><br><span class="line">        while (!queue.isEmpty()) &#123;</span><br><span class="line">            // 将该队列的“队尾”的元素添加到List中</span><br><span class="line">            list.add(queue.peek());</span><br><span class="line">            TreeNode p = queue.poll();</span><br><span class="line">            // 如果左子节点不为null，将它加入“队列”</span><br><span class="line">            if (p.left != null) &#123;</span><br><span class="line">                queue.offer(p.left);</span><br><span class="line">            &#125;</span><br><span class="line">            // 如果右子节点不为null，将它加入“队列”</span><br><span class="line">            if (p.right != null) &#123;</span><br><span class="line">                queue.offer(p.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来源：<a href="https://www.cnblogs.com/Dylansuns/p/6792108.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.cnblogs.com/Dylansuns/p/6792108.html?utm_source=itdadao&amp;utm_medium=referral</a></p><p>可参考相关的文档：</p><ol><li><a href="https://www.cnblogs.com/simplepaul/p/6721687.html" target="_blank" rel="noopener">https://www.cnblogs.com/simplepaul/p/6721687.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其中包含有先序遍历、中序遍历、后序遍历以及广度优先遍历四种遍历树的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>聊聊并发-Java中的Copy-On-Write容器</title>
    <link href="https://beausoft.github.io/2018/03/06/%E8%81%8A%E8%81%8A%E5%B9%B6%E5%8F%91-Java%E4%B8%AD%E7%9A%84Copy-On-Write%E5%AE%B9%E5%99%A8/"/>
    <id>https://beausoft.github.io/2018/03/06/聊聊并发-Java中的Copy-On-Write容器/</id>
    <published>2018-03-06T14:48:06.000Z</published>
    <updated>2018-03-06T14:54:01.361Z</updated>
    
    <content type="html"><![CDATA[<p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p><p><strong>什么是CopyOnWrite容器</strong></p><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p><p><strong>CopyOnWriteArrayList的实现原理</strong></p><p>在使用CopyOnWriteArrayList之前，我们先阅读其源码了解下它是如何实现的。以下代码是向ArrayList里添加元素，可以发现在添加的时候是需要加锁的，否则多线程写的时候会Copy出N个副本出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        <span class="comment">// 复制出新数组</span></span><br><span class="line"></span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 把新元素添加到新数组里</span></span><br><span class="line"></span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        <span class="comment">// 把原数组引用指向新数组</span></span><br><span class="line"></span><br><span class="line">        setArray(newElements);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读的时候不需要加锁，如果读的时候有多个线程正在向ArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的ArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public E get(int index) {<br>    return get(getArray(), index);<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;K, V&gt; internalMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        internalMap = <span class="keyword">new</span> HashMap&lt;K, V&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            Map&lt;K, V&gt; newMap = <span class="keyword">new</span> HashMap&lt;K, V&gt;(internalMap);</span><br><span class="line">            V val = newMap.put(key, value);</span><br><span class="line">            internalMap = newMap;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> internalMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; newData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            Map&lt;K, V&gt; newMap = <span class="keyword">new</span> HashMap&lt;K, V&gt;(internalMap);</span><br><span class="line">            newMap.putAll(newData);</span><br><span class="line">            internalMap = newMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现很简单，只要了解了CopyOnWrite机制，我们可以实现各种CopyOnWrite容器，并且在不同的应用场景中使用。</p><p><strong>CopyOnWrite的应用场景</strong></p><p>CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ifeve.book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ifeve.book.forkjoin.CopyOnWriteMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 黑名单服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fangtengfei</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListServiceImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteMap&lt;String, Boolean&gt; blackListMap = <span class="keyword">new</span> CopyOnWriteMap&lt;String, Boolean&gt;(</span><br><span class="line">            <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBlackList</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> blackListMap.get(id) == <span class="keyword">null</span> ? <span class="keyword">false</span> : <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBlackList</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        blackListMap.put(id, Boolean.TRUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量添加黑名单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addBlackList</span><span class="params">(Map&lt;String,Boolean&gt; ids)</span> </span>&#123;</span><br><span class="line">        blackListMap.putAll(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，但是使用CopyOnWriteMap需要注意两件事情：</p><ol><li><p>减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。</p></li><li><p>使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。如使用上面代码里的addBlackList方法。</p></li></ol><p><strong>CopyOnWrite的缺点</strong></p><p>CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。</p><p>内存占用问题。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。</p><p>针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如<a href="http://ifeve.com/concurrenthashmap/" target="_blank" rel="noopener">ConcurrentHashMap</a>。</p><p>数据一致性问题。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p><p>关于C++的STL中，曾经也有过Copy-On-Write的玩法，参见陈皓的《C++ STL String类中的Copy-On-Write》，后来，因为有很多线程安全上的事，就被去掉了。</p><p>来源：<a href="http://ifeve.com/java-copy-on-write/" target="_blank" rel="noopener">聊聊并发（四）深入分析ConcurrentHashMap</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用Co
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://beausoft.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>并发工具类（一）等待多线程完成的CountDownLatch</title>
    <link href="https://beausoft.github.io/2018/03/06/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88%E4%B8%80%EF%BC%89%E7%AD%89%E5%BE%85%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%8C%E6%88%90%E7%9A%84CountDownLatch/"/>
    <id>https://beausoft.github.io/2018/03/06/并发工具类（一）等待多线程完成的CountDownLatch/</id>
    <published>2018-03-06T14:41:28.000Z</published>
    <updated>2018-03-06T14:53:48.785Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简介</strong></p><p>CountDownLatch 允许一个或多个线程等待其他线程完成操作。</p><p><strong>应用场景</strong></p><p>假如有这样一个需求，当我们需要解析一个Excel里多个sheet的数据时，可以考虑使用多线程，每个线程解析一个sheet里的数据，等到所有的sheet都解析完之后，程序需要提示解析完成。在这个需求中，要实现主线程等待所有线程完成sheet的解析操作，最简单的做法是使用join。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinCountDownLatchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread parser1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread parser2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"parser2 finish"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">parser1.start();</span><br><span class="line">parser2.start();</span><br><span class="line">parser1.join();</span><br><span class="line">parser2.join();</span><br><span class="line">System.out.println(<span class="string">"all parser finish"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>join用于让当前执行线程等待join线程执行结束。其实现原理是不停检查join线程是否存活，如果join线程存活则让当前线程永远wait，代码片段如下，wait(0)表示永远等待下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line"> wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到join线程中止后，线程的this.notifyAll会被调用，调用notifyAll是在JVM里实现的，所以JDK里看不到，有兴趣的同学可以看看JVM源码。JDK不推荐在线程实例上使用wait，notify和notifyAll方法。</p><p>而在JDK1.5之后的并发包中提供的CountDownLatch也可以实现join的这个功能，并且比join的功能更多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> CountDownLatch c = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">c.countDown();</span><br><span class="line">System.out.println(<span class="number">2</span>);</span><br><span class="line">c.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">c.await();</span><br><span class="line">System.out.println(<span class="string">"3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CountDownLatch的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N。</p><p>当我们调用一次CountDownLatch的countDown方法时，N就会减1，CountDownLatch的await会阻塞当前线程，直到N变成零。由于countDown方法可以用在任何地方，所以这里说的N个点，可以是N个线程，也可以是1个线程里的N个执行步骤。用在多个线程时，你只需要把这个CountDownLatch的引用传递到线程里。</p><p><strong>其他方法</strong></p><p>如果有某个解析sheet的线程处理的比较慢，我们不可能让主线程一直等待，所以我们可以使用另外一个带指定时间的await方法，await(long time, TimeUnit unit): 这个方法等待特定时间后，就会不再阻塞当前线程。join也有类似的方法。</p><p>注意：计数器必须大于等于0，只是等于0时候，计数器就是零，调用await方法时不会阻塞当前线程。CountDownLatch不可能重新初始化或者修改CountDownLatch对象的内部计数器的值。一个线程调用countDown方法 happen-before 另外一个线程调用await方法。</p><p>来源：<a href="http://ifeve.com/talk-concurrency-countdownlatch/" target="_blank" rel="noopener">并发工具类（一）等待多线程完成的CountDownLatch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CountDownLatch 允许一个或多个线程等待其他线程完成操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假如有这样一个需求，当我们需要解析一个Excel里多个sheet的数据时，可
      
    
    </summary>
    
    
      <category term="Java" scheme="https://beausoft.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="https://beausoft.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
