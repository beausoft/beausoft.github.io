{"meta":{"title":"Beausoft Bolg","subtitle":"嘿嘿","description":"呵呵","author":"呵呵","url":"https://beausoft.github.io"},"pages":[{"title":"categories","date":"2018-03-03T06:05:35.000Z","updated":"2018-03-03T06:05:47.249Z","comments":true,"path":"categories/index.html","permalink":"https://beausoft.github.io/categories/index.html","excerpt":"","text":"layout: categoriescomments: false"},{"title":"tags","date":"2018-03-03T06:04:47.000Z","updated":"2018-03-03T06:05:23.351Z","comments":true,"path":"tags/index.html","permalink":"https://beausoft.github.io/tags/index.html","excerpt":"","text":"layout: tagscomments: false"}],"posts":[{"title":"Java中树和树的几种常规遍历方法","slug":"Java中树和树的几种常规遍历方法","date":"2018-03-06T14:50:33.000Z","updated":"2018-03-06T14:51:30.992Z","comments":true,"path":"2018/03/06/Java中树和树的几种常规遍历方法/","link":"","permalink":"https://beausoft.github.io/2018/03/06/Java中树和树的几种常规遍历方法/","excerpt":"","text":"其中包含有先序遍历、中序遍历、后序遍历以及广度优先遍历四种遍历树的方法：package com.ietree.basic.datastructure.tree.binarytree;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.List;import java.util.Queue;/** * Created by ietree * 2017/5/1 */public class ThreeLinkBinTree&lt;E&gt; &#123; public static class TreeNode &#123; Object data; TreeNode left; TreeNode right; TreeNode parent; public TreeNode() &#123; &#125; public TreeNode(Object data) &#123; this.data = data; &#125; public TreeNode(Object data, TreeNode left, TreeNode right, TreeNode parent) &#123; this.data = data; this.left = left; this.right = right; this.parent = parent; &#125; &#125; private TreeNode root; // 以默认的构造器创建二叉树 public ThreeLinkBinTree() &#123; this.root = new TreeNode(); &#125; // 以指定根元素创建二叉树 public ThreeLinkBinTree(E data) &#123; this.root = new TreeNode(data); &#125; /** * 为指定节点添加子节点 * * @param parent 需要添加子节点的父节点的索引 * @param data 新子节点的数据 * @param isLeft 是否为左节点 * @return 新增的节点 */ public TreeNode addNode(TreeNode parent, E data, boolean isLeft) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null， 无法添加子节点&quot;); &#125; if (isLeft &amp;&amp; parent.left != null) &#123; throw new RuntimeException(parent + &quot;节点已有左子节点，无法添加左子节点&quot;); &#125; if (!isLeft &amp;&amp; parent.right != null) &#123; throw new RuntimeException(parent + &quot;节点已有右子节点，无法添加右子节点&quot;); &#125; TreeNode newNode = new TreeNode(data); if (isLeft) &#123; // 让父节点的left引用指向新节点 parent.left = newNode; &#125; else &#123; // 让父节点的left引用指向新节点 parent.right = newNode; &#125; // 让新节点的parent引用到parent节点 newNode.parent = parent; return newNode; &#125; // 判断二叉树是否为空 public boolean empty() &#123; // 根据元素判断二叉树是否为空 return root.data == null; &#125; // 返回根节点 public TreeNode root() &#123; if (empty()) &#123; throw new RuntimeException(&quot;树为空，无法访问根节点&quot;); &#125; return root; &#125; // 返回指定节点（非根节点）的父节点 public E parent(TreeNode node) &#123; if (node == null) &#123; throw new RuntimeException(&quot;节点为null，无法访问其父节点&quot;); &#125; return (E) node.parent.data; &#125; // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null public E leftChild(TreeNode parent) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;); &#125; return parent.left == null ? null : (E) parent.left.data; &#125; // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null public E rightChild(TreeNode parent) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;); &#125; return parent.right == null ? null : (E) parent.right.data; &#125; // 返回该二叉树的深度 public int deep() &#123; // 获取该树的深度 return deep(root); &#125; // 这是一个递归方法：每一棵子树的深度为其所有子树的最大深度 + 1 private int deep(TreeNode node) &#123; if (node == null) &#123; return 0; &#125; // 没有子树 if (node.left == null &amp;&amp; node.right == null) &#123; return 1; &#125; else &#123; int leftDeep = deep(node.left); int rightDeep = deep(node.right); // 记录其所有左、右子树中较大的深度 int max = leftDeep &gt; rightDeep ? leftDeep : rightDeep; // 返回其左右子树中较大的深度 + 1 return max + 1; &#125; &#125; // 实现先序遍历 // 1、访问根节点 // 2、递归遍历左子树 // 3、递归遍历右子树 public List&lt;TreeNode&gt; preIterator() &#123; return preIterator(root); &#125; private List&lt;TreeNode&gt; preIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 处理根节点 list.add(node); // 递归处理左子树 if (node.left != null) &#123; list.addAll(preIterator(node.left)); &#125; // 递归处理右子树 if (node.right != null) &#123; list.addAll(preIterator(node.right)); &#125; return list; &#125; // 实现中序遍历 // 1、递归遍历左子树 // 2、访问根节点 // 3、递归遍历右子树 public List&lt;TreeNode&gt; inIterator() &#123; return inIterator(root); &#125; private List&lt;TreeNode&gt; inIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 递归处理左子树 if (node.left != null) &#123; list.addAll(inIterator(node.left)); &#125; // 处理根节点 list.add(node); // 递归处理右子树 if (node.right != null) &#123; list.addAll(inIterator(node.right)); &#125; return list; &#125; // 实现后序遍历 // 1、递归遍历左子树 // 2、递归遍历右子树 // 3、访问根节点 public List&lt;TreeNode&gt; postIterator() &#123; return postIterator(root); &#125; private List&lt;TreeNode&gt; postIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 递归处理左子树 if (node.left != null) &#123; list.addAll(postIterator(node.left)); &#125; // 递归处理右子树 if (node.right != null) &#123; list.addAll(postIterator(node.right)); &#125; // 处理根节点 list.add(node); return list; &#125; // 实现广度优先遍历 // 广度优先遍历又称为按层遍历，整个遍历算法先遍历二叉树的第一层（根节点），再遍历根节点的两个子节点（第二层），以此类推 public List&lt;TreeNode&gt; breadthFirst() &#123; Queue&lt;TreeNode&gt; queue = new ArrayDeque&lt;TreeNode&gt;(); List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); if (root != null) &#123; // 将根元素加入“队列” queue.offer(root); &#125; while (!queue.isEmpty()) &#123; // 将该队列的“队尾”的元素添加到List中 list.add(queue.peek()); TreeNode p = queue.poll(); // 如果左子节点不为null，将它加入“队列” if (p.left != null) &#123; queue.offer(p.left); &#125; // 如果右子节点不为null，将它加入“队列” if (p.right != null) &#123; queue.offer(p.right); &#125; &#125; return list; &#125;&#125; 来源：https://www.cnblogs.com/Dylansuns/p/6792108.html?utm_source=itdadao&amp;utm_medium=referral 可参考相关的文档： https://www.cnblogs.com/simplepaul/p/6721687.html","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"聊聊并发-Java中的Copy-On-Write容器","slug":"聊聊并发-Java中的Copy-On-Write容器","date":"2018-03-06T14:48:06.000Z","updated":"2018-03-06T14:54:01.361Z","comments":true,"path":"2018/03/06/聊聊并发-Java中的Copy-On-Write容器/","link":"","permalink":"https://beausoft.github.io/2018/03/06/聊聊并发-Java中的Copy-On-Write容器/","excerpt":"","text":"Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。 什么是CopyOnWrite容器 CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。 CopyOnWriteArrayList的实现原理 在使用CopyOnWriteArrayList之前，我们先阅读其源码了解下它是如何实现的。以下代码是向ArrayList里添加元素，可以发现在添加的时候是需要加锁的，否则多线程写的时候会Copy出N个副本出来。 12345678910111213141516171819202122232425262728293031public boolean add(T e) &#123; final ReentrantLock lock = this.lock; lock.lock(); try &#123; Object[] elements = getArray(); int len = elements.length; // 复制出新数组 Object[] newElements = Arrays.copyOf(elements, len + 1); // 把新元素添加到新数组里 newElements[len] = e; // 把原数组引用指向新数组 setArray(newElements); return true; &#125; finally &#123; lock.unlock(); &#125;&#125;final void setArray(Object[] a) &#123; array = a;&#125; 读的时候不需要加锁，如果读的时候有多个线程正在向ArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的ArrayList。 123public E get(int index) &#123; return get(getArray(), index);&#125; public E get(int index) { return get(getArray(), index);} 123456789101112131415161718192021222324252627282930313233import java.util.Collection;import java.util.Map;import java.util.Set;public class CopyOnWriteMap&lt;K, V&gt; implements Map&lt;K, V&gt;, Cloneable &#123; private volatile Map&lt;K, V&gt; internalMap; public CopyOnWriteMap() &#123; internalMap = new HashMap&lt;K, V&gt;(); &#125; public V put(K key, V value) &#123; synchronized (this) &#123; Map&lt;K, V&gt; newMap = new HashMap&lt;K, V&gt;(internalMap); V val = newMap.put(key, value); internalMap = newMap; return val; &#125; &#125; public V get(Object key) &#123; return internalMap.get(key); &#125; public void putAll(Map&lt;? extends K, ? extends V&gt; newData) &#123; synchronized (this) &#123; Map&lt;K, V&gt; newMap = new HashMap&lt;K, V&gt;(internalMap); newMap.putAll(newData); internalMap = newMap; &#125; &#125;&#125; 实现很简单，只要了解了CopyOnWrite机制，我们可以实现各种CopyOnWrite容器，并且在不同的应用场景中使用。 CopyOnWrite的应用场景 CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。实现代码如下： 1234567891011121314151617181920212223242526272829303132333435package com.ifeve.book;import java.util.Map;import com.ifeve.book.forkjoin.CopyOnWriteMap;/** * 黑名单服务 * * @author fangtengfei * */public class BlackListServiceImpl &#123; private static CopyOnWriteMap&lt;String, Boolean&gt; blackListMap = new CopyOnWriteMap&lt;String, Boolean&gt;( 1000); public static boolean isBlackList(String id) &#123; return blackListMap.get(id) == null ? false : true; &#125; public static void addBlackList(String id) &#123; blackListMap.put(id, Boolean.TRUE); &#125; /** * 批量添加黑名单 * * @param ids */ public static void addBlackList(Map&lt;String,Boolean&gt; ids) &#123; blackListMap.putAll(ids); &#125;&#125; 代码很简单，但是使用CopyOnWriteMap需要注意两件事情： 减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。 使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。如使用上面代码里的addBlackList方法。 CopyOnWrite的缺点 CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。 内存占用问题。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。 针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。 数据一致性问题。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。 关于C++的STL中，曾经也有过Copy-On-Write的玩法，参见陈皓的《C++ STL String类中的Copy-On-Write》，后来，因为有很多线程安全上的事，就被去掉了。 来源：聊聊并发（四）深入分析ConcurrentHashMap","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"https://beausoft.github.io/tags/多线程/"}]},{"title":"并发工具类（一）等待多线程完成的CountDownLatch","slug":"并发工具类（一）等待多线程完成的CountDownLatch","date":"2018-03-06T14:41:28.000Z","updated":"2018-03-06T14:53:48.785Z","comments":true,"path":"2018/03/06/并发工具类（一）等待多线程完成的CountDownLatch/","link":"","permalink":"https://beausoft.github.io/2018/03/06/并发工具类（一）等待多线程完成的CountDownLatch/","excerpt":"","text":"简介 CountDownLatch 允许一个或多个线程等待其他线程完成操作。 应用场景 假如有这样一个需求，当我们需要解析一个Excel里多个sheet的数据时，可以考虑使用多线程，每个线程解析一个sheet里的数据，等到所有的sheet都解析完之后，程序需要提示解析完成。在这个需求中，要实现主线程等待所有线程完成sheet的解析操作，最简单的做法是使用join。代码如下： 123456789101112131415161718192021222324public class JoinCountDownLatchTest &#123; public static void main(String[] args) throws InterruptedException &#123; Thread parser1 = new Thread(new Runnable() &#123; @Override public void run() &#123; &#125; &#125;); Thread parser2 = new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(\"parser2 finish\"); &#125; &#125;); parser1.start(); parser2.start(); parser1.join(); parser2.join(); System.out.println(\"all parser finish\"); &#125;&#125; join用于让当前执行线程等待join线程执行结束。其实现原理是不停检查join线程是否存活，如果join线程存活则让当前线程永远wait，代码片段如下，wait(0)表示永远等待下去。 123while (isAlive()) &#123; wait(0);&#125; 直到join线程中止后，线程的this.notifyAll会被调用，调用notifyAll是在JVM里实现的，所以JDK里看不到，有兴趣的同学可以看看JVM源码。JDK不推荐在线程实例上使用wait，notify和notifyAll方法。 而在JDK1.5之后的并发包中提供的CountDownLatch也可以实现join的这个功能，并且比join的功能更多。 1234567891011121314151617181920public class CountDownLatchTest &#123; static CountDownLatch c = new CountDownLatch(2); public static void main(String[] args) throws InterruptedException &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(1); c.countDown(); System.out.println(2); c.countDown(); &#125; &#125;).start(); c.await(); System.out.println(\"3\"); &#125;&#125; CountDownLatch的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N。 当我们调用一次CountDownLatch的countDown方法时，N就会减1，CountDownLatch的await会阻塞当前线程，直到N变成零。由于countDown方法可以用在任何地方，所以这里说的N个点，可以是N个线程，也可以是1个线程里的N个执行步骤。用在多个线程时，你只需要把这个CountDownLatch的引用传递到线程里。 其他方法 如果有某个解析sheet的线程处理的比较慢，我们不可能让主线程一直等待，所以我们可以使用另外一个带指定时间的await方法，await(long time, TimeUnit unit): 这个方法等待特定时间后，就会不再阻塞当前线程。join也有类似的方法。 注意：计数器必须大于等于0，只是等于0时候，计数器就是零，调用await方法时不会阻塞当前线程。CountDownLatch不可能重新初始化或者修改CountDownLatch对象的内部计数器的值。一个线程调用countDown方法 happen-before 另外一个线程调用await方法。 来源：并发工具类（一）等待多线程完成的CountDownLatch","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"https://beausoft.github.io/tags/多线程/"}]}]}