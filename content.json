{"meta":{"title":"Beausoft Bolg","subtitle":"嘿嘿","description":"呵呵","author":"呵呵","url":"https://beausoft.github.io"},"pages":[{"title":"categories","date":"2018-03-03T06:05:35.000Z","updated":"2018-03-03T06:05:47.249Z","comments":true,"path":"categories/index.html","permalink":"https://beausoft.github.io/categories/index.html","excerpt":"","text":"layout: categoriescomments: false"},{"title":"tags","date":"2018-03-03T06:04:47.000Z","updated":"2018-03-03T06:05:23.351Z","comments":true,"path":"tags/index.html","permalink":"https://beausoft.github.io/tags/index.html","excerpt":"","text":"layout: tagscomments: false"}],"posts":[{"title":"Java List去掉重复对象","slug":"Java-List去掉重复对象","date":"2018-03-06T15:01:08.000Z","updated":"2018-03-06T15:01:26.471Z","comments":true,"path":"2018/03/06/Java-List去掉重复对象/","link":"","permalink":"https://beausoft.github.io/2018/03/06/Java-List去掉重复对象/","excerpt":"","text":"一、 去除List中重复的String123456789public List&lt;String&gt; removeStringListDupli(List&lt;String&gt; stringList) &#123; Set&lt;String&gt; set = new LinkedHashSet&lt;&gt;(); set.addAll(stringList); stringList.clear(); stringList.addAll(set); return stringList;&#125; 或使用Java8的写法： 1List&lt;String&gt; unique = list.stream().distinct().collect(Collectors.toList()); 二、 List中对象去重比如现在有一个 Person类: 12345678910111213141516171819202122232425262728293031323334public class Person &#123; private Long id; private String name; public Person(Long id, String name) &#123; this.id = id; this.name = name; &#125; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return \"Person&#123;\" + \"id=\" + id + \", name='\" + name + '\\'' + '&#125;'; &#125;&#125; 重写Person对象的equals()方法和hashCode()方法: 1234567891011121314151617@Overridepublic boolean equals(Object o) &#123; if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; if (!id.equals(person.id)) return false; return name.equals(person.name);&#125;@Overridepublic int hashCode() &#123; int result = id.hashCode(); result = 31 * result + name.hashCode(); return result;&#125; 下面对象去重的代码： 123456789101112131415161718Person p1 = new Person(1l, \"jack\");Person p2 = new Person(3l, \"jack chou\");Person p3 = new Person(2l, \"tom\");Person p4 = new Person(4l, \"hanson\");Person p5 = new Person(5l, \"胶布虫\");List&lt;Person&gt; persons = Arrays.asList(p1, p2, p3, p4, p5, p5, p1, p2, p2);List&lt;Person&gt; personList = new ArrayList&lt;&gt;();// 去重persons.stream().forEach(p -&gt; &#123; if (!personList.contains(p)) &#123; personList.add(p); &#125;&#125;);System.out.println(personList); List 的contains()方法底层实现使用对象的equals方法去比较的，其实重写equals()就好，但重写了equals最好将hashCode也重写了。 可以参见:http://stackoverflow.com/questions/30745048/how-to-remove-duplicate-objects-from-java-arraylisthttp://blog.csdn.net/growing_tree/article/details/46622579 三、根据对象的属性去重下面要根据Person对象的id去重，那该怎么做呢？ 写一个方法吧: 12345public static List&lt;Person&gt; removeDupliById(List&lt;Person&gt; persons) &#123; Set&lt;Person&gt; personSet = new TreeSet&lt;&gt;((o1, o2) -&gt; o1.getId().compareTo(o2.getId())); personSet.addAll(persons); return new ArrayList&lt;&gt;(personSet);&#125; 通过Comparator比较器，比较对象属性，相同就返回0，达到过滤的目的。 再来看比较炫酷的Java8写法: 123456789import static java.util.Comparator.comparingLong;import static java.util.stream.Collectors.collectingAndThen;import static java.util.stream.Collectors.toCollection;// 根据id去重List&lt;Person&gt; unique = persons.stream().collect( collectingAndThen( toCollection(() -&gt; new TreeSet&lt;&gt;(comparingLong(Person::getId))), ArrayList::new)); 使用TreeSet去做去重，排序采用comparing比较器 保存原来的顺序，使用LinkedHashSet即可，如： 12List&lt;Person&gt; unique = persons.stream()..collect(Collectors.collectingAndThen( Collectors.toCollection(()-&gt; new LinkedHashSet&lt;&gt;()), ArrayList::new)); 还有一种写法: 1234567 public static &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, Object&gt; keyExtractor) &#123; Map&lt;Object, Boolean&gt; map = new ConcurrentHashMap&lt;&gt;(); return t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;&#125;// remove duplicatepersons.stream().filter(distinctByKey(p -&gt; p.getId())).forEach(p -&gt; System.out.println(p)); java8 确实简化了很多冗长的操作，精简了代码，小伙，研究java8去吧！ 参考: http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html http://www.cnblogs.com/jizha/p/java_arraylist_duplicate.html 来源:http://blog.csdn.net/jiaobuchong/article/details/54412094","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"Java位运算","slug":"Java位运算","date":"2018-03-06T15:00:14.000Z","updated":"2018-03-06T15:00:35.654Z","comments":true,"path":"2018/03/06/Java位运算/","link":"","permalink":"https://beausoft.github.io/2018/03/06/Java位运算/","excerpt":"","text":"二进制与十进制间的转换方法因为位运算是对二进制数进行操作，所以先来熟悉一下十进制与二进制之间的转换方法。 正整数的十进制转换二进制要点：==除二取余，倒序排列== 解释：将一个十进制数除以二，得到的商再除以二，依此类推直到商等于一或零时为止，倒取将除得的余数，即换算为二进制数的结果 例如把52换算成二进制数，计算结果如图： image 52除以2得到的余数依次为：0、0、1、0、1、1，倒序排列，所以52对应的二进制数就是110100。由于计算机内部表示数的字节单位都是定长的，以2的幂次展开，或者8位，或者16位，或者32位….。于是，一个二进制数用计算机表示时，位数不足2的幂次时，高位上要补足若干个0。本文都以8位为例。那么：(52)10=(00110100)2 负整数转换为二进制要点：==（正数除二取余，倒序排列）取反加一== 解释：将该负整数对应的正整数先转换成二进制，然后对其“取补”，再对取补后的结果加1即可 例如要把-52换算成二进制： 先取得52的二进制：00110100 对所得到的二进制数取反：11001011 将取反后的数值加一即可：11001100即：(-52)10=(11001100)2 image 小数转换为二进制要点：==（小数）乘二取整，正序排列== 解释：对被转换的小数乘以2，取其整数部分(0或1)作为二进制小数部分，取其小数部分，再乘以2，又取其整数部分作为二进制小数部分，然后取小数部分，再乘以2，直到小数部分为0或者已经去到了足够位数。每次取的整数部分，按先后次序排列，就构成了二进制小数的序列 例如把0.2转换为二进制，转换过程如图： image 0.2乘以2，取整后小数部分再乘以2，运算4次后得到的整数部分依次为0、0、1、1，结果又变成了0.2，若果0.2再乘以2后会循环刚开始的4次运算，所以0.2转换二进制后将是0011的循环，即：(0.2)10=(0.0011 0011 0011 …..)2循环的书写方法为在循环序列的第一位和最后一位分别加一个点标注 二进制转换为十进制整数二进制用数值乘以2的幂次依次相加，小数二进制用数值乘以2的负幂次然后依次相加！ 比如将二进制110转换为十进制： 首先补齐位数，00000110，首位为0，则为正整数，那么将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果 image 如果二进制数补足位数之后首位为1，那么其对应的整数为负，那么需要先取反然后再换算 比如11111001，首位为1，那么需要先对其取反，即：-00000110 00000110,对应的十进制为6，因此11111001对应的十进制即为-6 换算公式可表示为: 11111001=-00000110 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=-6 如果将二进制0.110转换为十进制： 将二进制中的三位数分别于下边对应的值相乘后相加得到的值为换算为十进制的结果 位运算Java提供的位运算符有：左移( &lt;&lt; )、右移( &gt;&gt; ) 、无符号右移( &gt;&gt;&gt; ) 、位与( &amp; ) 、位或( | )、位非( ~ )、位异或( ^ )，除了位非( ~ )是一元操作符外，其它的都是二元操作符。 移位运算符移位运算符操作的对象就是二进制的位，可以单独用移位运算符来处理int型整数。 运算符 含义 例子 &lt;&lt; 左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0） x&lt;&lt;3 &gt;&gt; “有符号”右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1. x &gt;&gt;3 &gt;&gt;&gt; “无符号”右移运算 符，将运算符左边的对象向右移动运算符右边指定的位数。采用0扩展机制，也就是说，无论值的正负，都在高位补0. x&gt;&gt;&gt;3 image 以int类型的6297为例，代码如下： 12345678System.out.println(Integer.toBinaryString(6297)); System.out.println(Integer.toBinaryString(-6297)); System.out.println(Integer.toBinaryString(6297&gt;&gt;5)); System.out.println(Integer.toBinaryString(-6297&gt;&gt;5)); System.out.println(Integer.toBinaryString(6297&gt;&gt;&gt;5)); System.out.println(Integer.toBinaryString(-6297&gt;&gt;&gt;5)); System.out.println(Integer.toBinaryString(6297&lt;&lt;5)); System.out.println(Integer.toBinaryString(-6297&lt;&lt;5)); 运行结果： 11111111111111111110011101100111 11000100 11111111111111111111111100111011 11000100 111111111111111111100111011 110001001100100000 11111111111111001110110011100000 注：x&lt;&lt;y 相当于 x*2y ；x&gt;&gt;y相当于x/2y 从计算速度上讲，移位运算要比算术运算快。 如果x是负数，那么x&gt;&gt;&gt;3没有什么算术意义，只有逻辑意义。 代码演示 左移 est1、将5左移2位： 1234567package com.xcy; public class Test &#123; public static void main(String[] args) &#123; System.out.println(5&lt;&lt;2);//运行结果是20 &#125; &#125; 运行结果是20，但是程序是怎样执行的呢？ 首先会将5转为2进制表示形式(java中，整数默认就是int类型,也就是32位): 0000 0000 0000 0000 0000 0000 0000 0101 然后左移2位后，低位补0： 0000 0000 0000 0000 0000 0000 0001 01==00== 换算成10进制为20 右移( &gt;&gt; ) ，右移同理，只是方向不一样罢了(感觉和没说一样) 1System.out.println(5&gt;&gt;2);//运行结果是1 还是先将5转为2进制表示形式： 0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0： ==00==00 0000 0000 0000 0000 0000 0000 0001 无符号右移( &gt;&gt;&gt; ) 我们知道在Java中int类型占32位，可以表示一个正数，也可以表示一个负数。正数换算成二进制后的最高位为0，负数的二进制最高为为1 例如 -5换算成二进制后为： 1111 1111 1111 1111 1111 1111 1111 1011 (刚开始接触二进制时，不知道最高位是用来表示正负之分的，当时就总想不通。。明明算起来得到的就是一个正数-_-) 我们分别对5进行右移3位、 -5进行右移3位和无符号右移3位： 123456789package com.xcy; public class Test &#123; public static void main(String[] args) &#123; System.out.println(5&gt;&gt;3);//结果是0 System.out.println(-5&gt;&gt;3);//结果是-1 System.out.println(-5&gt;&gt;&gt;3);//结果是536870911 &#125; &#125; 我们来看看它的移位过程(可以通过其结果换算成二进制进行对比)： 5换算成二进制： 0000 0000 0000 0000 0000 0000 0000 0101 5右移3位后结果为0，0的二进制为： ==000==0 0000 0000 0000 0000 0000 0000 0000 // (==用0进行补位==) -5换算成二进制： 1111 1111 1111 1111 1111 1111 1111 1011 -5右移3位后结果为-1，-1的二进制为：==111==1 1111 1111 1111 1111 1111 1111 1111 // (==用1进行补位==) -5无符号右移3位后的结果 536870911 换算成二进制： ==000==1 1111 1111 1111 1111 1111 1111 1111 // (==用0进行补位==) 通过其结果转换成二进制后，我们可以发现，==正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了)== 注意：笔者在这里说的是右移，高位补位的情况。正数或者负数左移，低位都是用0补。(自行测试) 小技巧： &lt;&lt;&nbsp;：&nbsp;左移运算符，num &lt;&lt; 1,相当于num乘以2 &gt;&gt;&nbsp;：&nbsp;右移运算符，num &gt;&gt; 1,相当于num除以2 &gt;&gt;&gt;&nbsp;：&nbsp;无符号右移，忽略符号位，空位都以0补齐 与运算符与运算符用符号“&amp;”表示，其使用规律如下： 两个操作数中位都为1，结果才为1，否则结果为0，例如下面的程序段。 123456789public class data13&#123; public static void main(String[] args) &#123; int a=129; int b=128; System.out.println(\"a 和b 与的结果是：\"+(a&amp;b)); &#125;&#125; 运行结果 a 和b 与的结果是：128 下面分析这个程序： “a”的值是129，转换成二进制就是10000001，而“b”的值是128，转换成二进制就是10000000。根据与运算符的运算规律，只有两个位都是1，结果才是1，可以知道结果就是10000000，即128。 或运算符或运算符用符号“|”表示，其运算规律如下： 两个位只要有一个为1，那么结果就是1，否则就为0，下面看一个简单的例子。 123456789public class data14&#123; public static void main(String[] args) &#123; int a=129; int b=128; System.out.println(&quot;a 和b 或的结果是：&quot;+(a|b)); &#125;&#125; 运行结果 a 和b 或的结果是：129 下面分析这个程序段： a 的值是129，转换成二进制就是10000001，而b 的值是128，转换成二进制就是10000000，根据或运算符的运算规律，只有两个位有一个是1，结果才是1，可以知道结果就是10000001，即129。 异或运算符异或运算符是用符号“^”表示的，其运算规律是： 两个操作数的位中，相同则结果为0，不同则结果为1。下面看一个简单的例子。 123456789public class data16&#123; public static void main(String[] args) &#123; int a=15; int b=2; System.out.println(&quot;a 与 b 异或的结果是：&quot;+(a^b)); &#125;&#125; 运行结果 a 与 b 异或的结果是：13 分析上面的程序段：a 的值是15，转换成二进制为1111，而b 的值是2，转换成二进制为0010，根据异或的运算规律，可以得出其结果为1101 即13。 非运算符非运算符用符号“~”表示，其运算规律如下： 如果位为0，结果是1，如果位为1，结果是0，下面看一个简单例子。 12345678public class data15&#123; public static void main(String[] args) &#123; int a=2; System.out.println(&quot;a 非的结果是：&quot;+(~a)); &#125;&#125; Java位运算相关技巧计算机所有的运算最终都是转换为位运算和移位的操作，效率也很高，在很多场合具有很强的技巧，所以做个总结供大家学习。 交换a,b的值，不使用第三个变量？通常使用第三个变量： 123456int a=3,b=4; int temp; temp=a； a=b; b=temp; 法一：【法一需要考虑a+b会不会超过a表达的数值范围，导致内存溢出】123a=a+b; b=a-b; // 右边等价于a+b-b=====a a=a-b; //此时b等于a,右边等价于a+b-a====b 法二：123a=a^b; b=a^b; // 右边等价于a^b^b=====a a=a^b; //此时b===a; 此式右边等于a^b^a=====b 实现一个函数，输入一个整数，输出为该整数的二进制表示有多少个1？思路1：：判断该整数是否能被2整除，如果不能被2整除，则最后一位肯定为1，计数器加一，然后右移一位；12345678910int Numberof1(int n)&#123; int count=0; while(n)&#123; if(n&amp;1) // if(n%2==1) count++; n=n&gt;&gt;1; &#125; return count； &#125; 存在问题：如果把移位改为除以2，那样效率又太低，如果输入时一个负数，0x8000 0000右边移动一位，变为0xC000 0000 。而不等价于理想的右移动一位的时候相当于除以2，得0x4000 0000。这样最终就会都变为1，引起死循环； 思路2：思路1中右移n可能会导致是负数的时候造成死循环。那么我们改进，每次左移1.1234567891011int Numberof1(int n)&#123; int count=0; unsigned int flag=1; while(flag)&#123; if(n&amp;flag) // 判断某位是否为1 count++; flag=flag&lt;&lt;1; &#125; return count； &#125; 思路3： (n-1)&amp;n相当于把n的最右边一个1变为0；n-1:相当于把最右边的1变为0，左边保持不变，该1右边的0变为1；10100—减1—&gt;10011 (n-1)&amp;n：10100—&amp;—10011————&gt; 10 000 12345678int Numberof1(int n) &#123; int count=0; while(n)&#123; count++; n=(n-1) &amp;&amp; n; &#125; return count； &#125; 实现一个函数不用加减乘除求两个数的和思路：num1^num2:相当于只做加法不做进位（不同为1，相同为0，此时都为1的二进制位没有进位）； num1&amp;num2&lt;&lt;1:相当于进位（都为1，才为1.左移1位） 把上面两步相加，反复迭代即可。 123456789public int add(int num1,int num2)&#123; int sum,carray; do&#123; sum=num1^num2; carray=num1&amp;num2&lt;&lt;1; num1=sum; num2=carray; &#125;while(num2!=0); &#125; 判断一个数是不是2的整数次方？思路：如果一个数是2的整数次方，那么这个数的二进制表示中有且仅有一位为1. (n-1)&amp;n那么这个数唯一的一个1就会变为0；(n-1)&amp;n==0 就是2的整数次方。 两个整数m,n,改变多少位二进制表示才能从m变为n.思路：求异或，然后求异或中有多少个1. 一个整形数组里面除了两个数字，其他数字都出现了两次，找出只出现了一次的两个数字。时间复杂O(n),空间O(1)思路：如果只有一个数字是只出现了一次，其他数字都出现了两次，那么只需要异或数组中的的所有元素，最后得到的值就是那个只出现一次的数字，出现偶数次的数字都被异或得0了。a^a==0。现在是两个只出现了一次的数字，那么想办法分组，每个组里面包含一个只出现一次的数字，要保证其他一样的数字出现在同一个组里。 首先异或数组里面所有的数字得到一个结果值。由于有两个数字只出现了一次，其他数字异或抵消掉了，这两个不同的数字异或结果不等于0，结果的二进制表示中肯定至少有一位为1.我们找该结果的第一个为1的位置。这两个只出现一次的数字，肯定该对应位一个为1，一个为0.我们依据每个元素该位置是否为1分为两组，这2个不同的只出现一次的数字就被分到两个组里，数字出现两次的数字由于一样肯定会被分到同一个组里。最后，分别异或两个组，得到两个数字就是唯一出现一次的两个不同的数字。 1234567891011121314151617181920212223242526272829303132public void findNumAppearOne(int[] a)&#123; if(a==null || a.length&lt;2) return ; int sum=0; for(int i:a) sum^=i; int index=findFirstBitIs1(sum); //发现第一个为1的位置； int sum1=0; int sum2=0; for(int i:a)&#123; if(isBit1(i,index)) //判断i的index位置是不是1； sum1^=i; else sum2^=i; &#125; System.out.println(sum1); System.out.println(sum2); &#125; public int findFirstBitIs1(int sum)&#123;//判断从右往左的第n位置是不是1，是1返回。 int index=0; while((sum&amp;1)==0)&#123; sum=sum&gt;&gt;1; index++; &#125; return index; &#125; public booleam isBit1(int i,int index)&#123; i=i&gt;&gt;index; return (i&amp;1)==0 ; &#125; 参考来源： 二进制与十进制间的转换方法(图文教程) Java 位运算(移位、位与、或、异或、非） 与位运算相关的编程算法技巧的总结java实现","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"使用BigDecimal进行精确运算","slug":"使用BigDecimal进行精确运算","date":"2018-03-06T14:59:07.000Z","updated":"2018-03-06T14:59:25.982Z","comments":true,"path":"2018/03/06/使用BigDecimal进行精确运算/","link":"","permalink":"https://beausoft.github.io/2018/03/06/使用BigDecimal进行精确运算/","excerpt":"","text":"首先我们先来看如下代码示例： 12345678public class Test_1 &#123; public static void main(String[] args) &#123; System.out.println(0.06+0.01); System.out.println(1.0-0.42); System.out.println(4.015*100); System.out.println(303.1/1000); &#125;&#125; 运行结果如下： 0.06999999999999999 0.5800000000000001 401.49999999999994 0.30310000000000004 你认为你看错了，但结果却是是这样的。问题在哪里呢？原因在于我们的计算机是二进制的。浮点数没有办法是用二进制进行精确表示。我们的CPU表示浮点数由两个部分组成：指数和尾数，这样的表示方法一般都会失去一定的精确度，有些浮点数运算也会产生一定的误差。如：2.4的二进制表示并非就是精确的2.4。反而最为接近的二进制表示是 2.3999999999999999。浮点数的值实际上是由一个特定的数学公式计算得到的。 其实java的float只能用来进行科学计算或工程计算，在大多数的商业计算中，一般采用java.math.BigDecimal类来进行精确计算。 在使用BigDecimal类来进行计算的时候，主要分为以下步骤： 用float或者double变量构建BigDecimal对象。 通过调用BigDecimal的加，减，乘，除等相应的方法进行算术运算。 把BigDecimal对象转换成float，double，int等类型。 一般来说，可以使用BigDecimal的构造方法或者静态方法的valueOf()方法把基本类型的变量构建成BigDecimal对象。 12//BigDecimal b1 = new BigDecimal(Double.toString(0.48));BigDecimal b2 = BigDecimal.valueOf(0.48); 对于常用的加，减，乘，除，BigDecimal类提供了相应的成员方法。 1234public BigDecimal add(BigDecimal value); //加法public BigDecimal subtract(BigDecimal value); //减法 public BigDecimal multiply(BigDecimal value); //乘法public BigDecimal divide(BigDecimal value); //除法 进行相应的计算后，我们可能需要将BigDecimal对象转换成相应的基本数据类型的变量，可以使用floatValue()，doubleValue()等方法。 注意： 这里有个陷阱，当你使用new BigDecimal(Double d) 时，得到的BigDecimal中的long值并不是精确，详情可查源码，可追溯到native long doubleToRawLongBits(double value)；这时使用new BigDecimal(String s)得到的即准确值，用于计算不会出现误差 BigDecimal对小数的处理： BigDecimal.setScale()方法用于格式化小数点： setScale(1)表示保留一位小数，默认用四舍五入的方式 setScale(1,BigDecimal.ROUND_DOWN)直接删除多余的小数位，如2.35会变成2.3 setScale(1,BigDecimal.ROUND_UP)进位处理，2.35变成2.4 setScale(1,BigDecimal.ROUND_HALF_UP)四舍五入，2.35变成2.4 setScale(1,BigDecimal.ROUND_HALF_DOWN)四舍五入，2.35变成2.3，如果是5则向下舍 scale指的是小数位后的位数，比如123.456的scale为3； ==scale是BigDecimal类中的方法：== 12BigDecimal b = new BigDecimal(\"123.456\");b.scale();//3 ==roundingMode==是小数的保留模式。它们都是BigDecimal中的常量字段,有很多种，示例如： 12new BigDecimal(Double.parseDouble(succRate) / 24).setScale(2, BigDecimal.ROUND_HALF_UP).toString();new BigDecimal(svcSuccData.get(\"succRate\").toString()).setScale(2, BigDecimal.ROUND_HALF_UP).toString() 参考来源： 使用BigDecimal进行精确运算 BigDecimal.setScale 处理java小数点","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"Math各个函数","slug":"Math各个函数","date":"2018-03-06T14:58:25.000Z","updated":"2018-03-06T14:58:48.891Z","comments":true,"path":"2018/03/06/Math各个函数/","link":"","permalink":"https://beausoft.github.io/2018/03/06/Math各个函数/","excerpt":"","text":"Math.E常量，比任何其他值都更接近 e（即自然对数的底数）的 double 值。 Math.PI常量，比任何其他值都更接近 pi（即圆的周长与直径之比）的 double 值。 Math.random返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。返回值是一个伪随机选择的数，在该范围内（近似）均匀分布。 第一次调用该方法时，它将创建一个新的伪随机数生成器，与以下表达式完全相同 new java.util.Random 之后，新的伪随机数生成器可用于此方法的所有调用，但不能用于其他地方。 此方法是完全同步的，可允许多个线程使用而不出现错误。但是，如果许多线程需要以极高的速率生成伪随机数，那么这可能会减少每个线程对拥有自己伪随机数生成器的争用。 Math.max返回两个 int 值中较大的一个。也就是说，结果为更接近 Integer.MAX_VALUE 值的参数。如果参数值相同，那么结果也是同一个值。 Math.min返回两个 long 值中较大的一个。也就是说，结果为更接近 Long.MAX_VALUE 值的参数。如果参数值相同，那么结果也是同一个值。 Math.abs返回 int 值的绝对值。如果参数为非负数，则返回该参数。如果参数为负数，则返回该参数的相反数。 注意，如果参数等于 Integer.MIN_VALUE 的值（即能够表示的最小负 int 值），那么结果与该值相同且为负。 1Math.abs(-10);//输出10 Math.floor向下取整 round 则是4舍5入的计算，round方法，它表示“四舍五入”，算法为Math.floor(x+0.5)，即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11。 12345Math.floor(2);//=2Math.floor(2.1);//=2Math.floor(-2.1);//=-3Math.floor(-2.5);//=-3Math.floor(-2.9);//=-3 Math.ceil向上取整 返回最小的（最接近负无穷大） double 值，该值大于等于参数，并等于某个整数。特殊情况如下： 如果参数值已经等于某个整数，那么结果与该参数相同。 如果参数为 NaN、无穷大、正 0 或负 0，那么结果与参数相同。 如果参数值小于 0，但是大于 -1.0，那么结果为负 0。 注意， Math.ceil(x) 的值与 -Math.floor(-x) 的值完全相同。 返回最小（最接近负无穷大）浮点值，该值大于等于该参数，并等于某个整数。 1234Math.ceil(2);//=2Math.ceil(2.1);//=3Math.ceil(2.5);//=3Math.ceil(2.9);//=3 Math.rint返回其值最接近参数并且是整数的 double 值。 返回double值最接近参数的值，并等于某个整数。如果两个double值跟整数都同样接近，结果是整数值是偶数。特殊情况： 如果参数值已经等于某个整数，那么结果跟参数一样。 如果参数为NaN或无穷大，正零或负零，那么结果和参数一样。 12Math.rint(1654.9874);//=1655.0Math.rint(-9765.134);//=-9765.0 12345678Math.rint(2);//=2Math.rint(2.1);//=2Math.rint(-2.5);//=-2Math.rint(2.5);//=2Math.rint(2.9);//=3Math.rint(-2.9);//=-3Math.rint(-2.49);//=-2Math.rint(-2.51);//=-3 Math.round特殊的四舍五入 返回最接近参数的 long。结果将舍入为整数：加上 1/2，对结果调用 floor 并将所得结果强制转换为 long 类型。换句话说，结果等于以下表达式的值： (long)Math.floor(a + 0.5d) 特殊情况如下： 如果参数为 NaN，那么结果为 0。 如果结果为负无穷大或任何小于等于 Long.MIN_VALUE 的值，那么结果等于 Long.MIN_VALUE 的值。 如果参数为正无穷大或任何大于等于 Long.MAX_VALUE 的值，那么结果等于 Long.MAX_VALUE 的值。 返回舍入为最接近的 long 值的参数值。 1234Math.round(3.14);//3Math.round(3.5);//4Math.round(-3.14);//-3Math.round(-3.5);//-3 还有一个问题就是==奇进偶舍==的原则 今天客户跑过来跟我说，我们程序里面计算的价格不对，我检查了一下，发现价格是经过折算后的价格，结果是可能小数位较多，而单据上只能打印两位价格，所以就对价格调用Math.Round(price,2)函数进行四舍五入。 而出现问题的单价就是1.805，函数Math.Round(1.805,2)的返回值却是1.80，按照四舍五入的原则，结果应该是1.81才对。 在一番google之后，发现微软是对了，是我们错了。 原来四舍五入也有个国际惯例，叫奇进偶舍，意思是当舍入位前面一位是奇数时，就进，为偶数时，就舍，这也是体现公平性的原理。 可是国际惯例往往在国内很多企业行不通，为了应付他们的要求，采用Math.Round(price,2,MidpointRounding.AwayFromZero)就可以了。 Math.copySigncopySign(x,y) 返回 用y的符号取代x的符号后新的x值 返回带有第二个浮点参数符号的第一个浮点参数。注意，与 StrictMath.copySign 方法不同，此方法不要求将 NaN sign 参数视为正值；允许实现将某些 NaN 参数视为正，将另一些视为负，以获得更好的性能。 参数： magnitude - 提供结果数值的参数 sign - 提供结果符号的参数 返回： 一个值，带有 magnitude 的数值， sign 的符号。 12Math.copySign(-1.0, 2.0);//输出1.0 Math.copySign(2.0, -1.0);//输出-2.0 Math.nextAfternextAfter(a,b) 返回(a,b)或(b,a)间与a相邻的浮点数 b可以比a小 返回第一个参数和第二个参数之间与第一个参数相邻的浮点数。如果两个参数比较起来相等，则返回第二个参数。 特殊情况如下： 如果任一参数为 NaN，则返回 NaN。 如果两个参数都为有符号的 0，则不做更改地返回 direction（根据要求，如果参数比较起来相等，将返回第二个参数）。 如果 start 为 ±Double.MIN_VALUE，而 direction 的值要求结果为一个比 start 小的数值，那么将返回 0，并带有与 start 相同的符号。 如果 start 为无穷大，而 direction 的值要求结果为一个比 start 小的数值，则返回 Double.MAX_VALUE，并带有与 start 相同的符号。 如果 start 等于 ±Double.MAX_VALUE，而 direction 的值要求结果为一个比 start 大的数值，则返回无穷大，并带有与 start 相同的符号。 参数： start - 起始浮点值。 direction - 一个值，指示应返回 start 的某个邻数还是 start。 返回： start 和 direction 之间与 start 相邻的浮点数。 12Math.nextAfter(1.2, 2.7);//输出1.2000000000000002 Math.nextAfter(1.2, -1);//输出1.1999999999999997 所以这里的b是控制条件 Math.nextUpnextUp(a) 返回比a大一点点的浮点数 1Math.nextUp(1.2);//输出1.2000000000000002 返回 d 和正无穷大之间与 d 相邻的浮点值。此方法在语义上等同于 nextAfter(d, Double.POSITIVE_INFINITY)；但是， nextUp 实现的返回速度可能比其等价 nextAfter 调用快。 特殊情况如下： 如果参数为 NaN，那么结果为 NaN。 如果参数为正无穷大，那么结果为正无穷大。 如果参数为 0，那么结果为 Double.MIN_VALUE。 参数： d - 起始浮点值。 返回： 离正无穷大较近的相邻浮点值。 Math.nextDownnextDown(a) 返回比a小一点点的浮点数 1Math.nextDown(1.2);//输出1.1999999999999997 三角函数与反三角函数cos求余弦 sin求正弦 tan求正切 acos求反余弦 asin求反正弦 atan求反正切 atan2(y,x)求向量(x,y)与x轴夹角 12Math.acos(-1.0);//输出圆周率3.14... Math.atan2(1.0, 1.0);//输出 π/4 的小数值 开根号cbrt(x)开立方 sqrt(x)开平方 hypot(x,y)求sqrt(x*x+y*y)在求两点间距离时有用sqrt((x1-x2)^2+(y1-y2)^2) 123Math.sqrt(4.0);//输出2.0 Math.cbrt(8.0);//输出2.0 Math.hypot(3.0, 4.0);//输出5.0 对数log(a) a的自然对数(底数是e) log10(a) a 的底数为10的对数 log1p(a) a+1的自然对数 值得注意的是，前面其他函数都有重载，对数运算的函数只能传double型数据并返回double型数据 123Math.log(Math.E);//输出1.0 Math.log10(10);//输出1.0 Math.log1p(Math.E-1.0);//输出1.0 幂exp(x) 返回e^x的值 expm1(x) 返回e^x - 1的值 pow(x,y) 返回x^y的值 这里可用的数据类型也只有double 12Math.exp(2);//输出E^2的值 Math.pow(2.0, 3.0);//输出8.0 转换toDegrees(a) 弧度换角度 toRadians(a) 角度换弧度 12Math.toDegrees(Math.PI);//输出180.0 Math.toRadians(180);//输出 π 的值","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"Java中树和树的几种常规遍历方法","slug":"Java中树和树的几种常规遍历方法","date":"2018-03-06T14:50:33.000Z","updated":"2018-03-06T14:51:30.992Z","comments":true,"path":"2018/03/06/Java中树和树的几种常规遍历方法/","link":"","permalink":"https://beausoft.github.io/2018/03/06/Java中树和树的几种常规遍历方法/","excerpt":"","text":"其中包含有先序遍历、中序遍历、后序遍历以及广度优先遍历四种遍历树的方法：package com.ietree.basic.datastructure.tree.binarytree;import java.util.ArrayDeque;import java.util.ArrayList;import java.util.List;import java.util.Queue;/** * Created by ietree * 2017/5/1 */public class ThreeLinkBinTree&lt;E&gt; &#123; public static class TreeNode &#123; Object data; TreeNode left; TreeNode right; TreeNode parent; public TreeNode() &#123; &#125; public TreeNode(Object data) &#123; this.data = data; &#125; public TreeNode(Object data, TreeNode left, TreeNode right, TreeNode parent) &#123; this.data = data; this.left = left; this.right = right; this.parent = parent; &#125; &#125; private TreeNode root; // 以默认的构造器创建二叉树 public ThreeLinkBinTree() &#123; this.root = new TreeNode(); &#125; // 以指定根元素创建二叉树 public ThreeLinkBinTree(E data) &#123; this.root = new TreeNode(data); &#125; /** * 为指定节点添加子节点 * * @param parent 需要添加子节点的父节点的索引 * @param data 新子节点的数据 * @param isLeft 是否为左节点 * @return 新增的节点 */ public TreeNode addNode(TreeNode parent, E data, boolean isLeft) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null， 无法添加子节点&quot;); &#125; if (isLeft &amp;&amp; parent.left != null) &#123; throw new RuntimeException(parent + &quot;节点已有左子节点，无法添加左子节点&quot;); &#125; if (!isLeft &amp;&amp; parent.right != null) &#123; throw new RuntimeException(parent + &quot;节点已有右子节点，无法添加右子节点&quot;); &#125; TreeNode newNode = new TreeNode(data); if (isLeft) &#123; // 让父节点的left引用指向新节点 parent.left = newNode; &#125; else &#123; // 让父节点的left引用指向新节点 parent.right = newNode; &#125; // 让新节点的parent引用到parent节点 newNode.parent = parent; return newNode; &#125; // 判断二叉树是否为空 public boolean empty() &#123; // 根据元素判断二叉树是否为空 return root.data == null; &#125; // 返回根节点 public TreeNode root() &#123; if (empty()) &#123; throw new RuntimeException(&quot;树为空，无法访问根节点&quot;); &#125; return root; &#125; // 返回指定节点（非根节点）的父节点 public E parent(TreeNode node) &#123; if (node == null) &#123; throw new RuntimeException(&quot;节点为null，无法访问其父节点&quot;); &#125; return (E) node.parent.data; &#125; // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null public E leftChild(TreeNode parent) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;); &#125; return parent.left == null ? null : (E) parent.left.data; &#125; // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null public E rightChild(TreeNode parent) &#123; if (parent == null) &#123; throw new RuntimeException(parent + &quot;节点为null，无法添加子节点&quot;); &#125; return parent.right == null ? null : (E) parent.right.data; &#125; // 返回该二叉树的深度 public int deep() &#123; // 获取该树的深度 return deep(root); &#125; // 这是一个递归方法：每一棵子树的深度为其所有子树的最大深度 + 1 private int deep(TreeNode node) &#123; if (node == null) &#123; return 0; &#125; // 没有子树 if (node.left == null &amp;&amp; node.right == null) &#123; return 1; &#125; else &#123; int leftDeep = deep(node.left); int rightDeep = deep(node.right); // 记录其所有左、右子树中较大的深度 int max = leftDeep &gt; rightDeep ? leftDeep : rightDeep; // 返回其左右子树中较大的深度 + 1 return max + 1; &#125; &#125; // 实现先序遍历 // 1、访问根节点 // 2、递归遍历左子树 // 3、递归遍历右子树 public List&lt;TreeNode&gt; preIterator() &#123; return preIterator(root); &#125; private List&lt;TreeNode&gt; preIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 处理根节点 list.add(node); // 递归处理左子树 if (node.left != null) &#123; list.addAll(preIterator(node.left)); &#125; // 递归处理右子树 if (node.right != null) &#123; list.addAll(preIterator(node.right)); &#125; return list; &#125; // 实现中序遍历 // 1、递归遍历左子树 // 2、访问根节点 // 3、递归遍历右子树 public List&lt;TreeNode&gt; inIterator() &#123; return inIterator(root); &#125; private List&lt;TreeNode&gt; inIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 递归处理左子树 if (node.left != null) &#123; list.addAll(inIterator(node.left)); &#125; // 处理根节点 list.add(node); // 递归处理右子树 if (node.right != null) &#123; list.addAll(inIterator(node.right)); &#125; return list; &#125; // 实现后序遍历 // 1、递归遍历左子树 // 2、递归遍历右子树 // 3、访问根节点 public List&lt;TreeNode&gt; postIterator() &#123; return postIterator(root); &#125; private List&lt;TreeNode&gt; postIterator(TreeNode node) &#123; List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); // 递归处理左子树 if (node.left != null) &#123; list.addAll(postIterator(node.left)); &#125; // 递归处理右子树 if (node.right != null) &#123; list.addAll(postIterator(node.right)); &#125; // 处理根节点 list.add(node); return list; &#125; // 实现广度优先遍历 // 广度优先遍历又称为按层遍历，整个遍历算法先遍历二叉树的第一层（根节点），再遍历根节点的两个子节点（第二层），以此类推 public List&lt;TreeNode&gt; breadthFirst() &#123; Queue&lt;TreeNode&gt; queue = new ArrayDeque&lt;TreeNode&gt;(); List&lt;TreeNode&gt; list = new ArrayList&lt;TreeNode&gt;(); if (root != null) &#123; // 将根元素加入“队列” queue.offer(root); &#125; while (!queue.isEmpty()) &#123; // 将该队列的“队尾”的元素添加到List中 list.add(queue.peek()); TreeNode p = queue.poll(); // 如果左子节点不为null，将它加入“队列” if (p.left != null) &#123; queue.offer(p.left); &#125; // 如果右子节点不为null，将它加入“队列” if (p.right != null) &#123; queue.offer(p.right); &#125; &#125; return list; &#125;&#125; 来源：https://www.cnblogs.com/Dylansuns/p/6792108.html?utm_source=itdadao&amp;utm_medium=referral 可参考相关的文档： https://www.cnblogs.com/simplepaul/p/6721687.html","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"}]},{"title":"聊聊并发-Java中的Copy-On-Write容器","slug":"聊聊并发-Java中的Copy-On-Write容器","date":"2018-03-06T14:48:06.000Z","updated":"2018-03-06T14:54:01.361Z","comments":true,"path":"2018/03/06/聊聊并发-Java中的Copy-On-Write容器/","link":"","permalink":"https://beausoft.github.io/2018/03/06/聊聊并发-Java中的Copy-On-Write容器/","excerpt":"","text":"Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。 什么是CopyOnWrite容器 CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。 CopyOnWriteArrayList的实现原理 在使用CopyOnWriteArrayList之前，我们先阅读其源码了解下它是如何实现的。以下代码是向ArrayList里添加元素，可以发现在添加的时候是需要加锁的，否则多线程写的时候会Copy出N个副本出来。 12345678910111213141516171819202122232425262728293031public boolean add(T e) &#123; final ReentrantLock lock = this.lock; lock.lock(); try &#123; Object[] elements = getArray(); int len = elements.length; // 复制出新数组 Object[] newElements = Arrays.copyOf(elements, len + 1); // 把新元素添加到新数组里 newElements[len] = e; // 把原数组引用指向新数组 setArray(newElements); return true; &#125; finally &#123; lock.unlock(); &#125;&#125;final void setArray(Object[] a) &#123; array = a;&#125; 读的时候不需要加锁，如果读的时候有多个线程正在向ArrayList添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的ArrayList。 123public E get(int index) &#123; return get(getArray(), index);&#125; public E get(int index) { return get(getArray(), index);} 123456789101112131415161718192021222324252627282930313233import java.util.Collection;import java.util.Map;import java.util.Set;public class CopyOnWriteMap&lt;K, V&gt; implements Map&lt;K, V&gt;, Cloneable &#123; private volatile Map&lt;K, V&gt; internalMap; public CopyOnWriteMap() &#123; internalMap = new HashMap&lt;K, V&gt;(); &#125; public V put(K key, V value) &#123; synchronized (this) &#123; Map&lt;K, V&gt; newMap = new HashMap&lt;K, V&gt;(internalMap); V val = newMap.put(key, value); internalMap = newMap; return val; &#125; &#125; public V get(Object key) &#123; return internalMap.get(key); &#125; public void putAll(Map&lt;? extends K, ? extends V&gt; newData) &#123; synchronized (this) &#123; Map&lt;K, V&gt; newMap = new HashMap&lt;K, V&gt;(internalMap); newMap.putAll(newData); internalMap = newMap; &#125; &#125;&#125; 实现很简单，只要了解了CopyOnWrite机制，我们可以实现各种CopyOnWrite容器，并且在不同的应用场景中使用。 CopyOnWrite的应用场景 CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单每天晚上更新一次。当用户搜索时，会检查当前关键字在不在黑名单当中，如果在，则提示不能搜索。实现代码如下： 1234567891011121314151617181920212223242526272829303132333435package com.ifeve.book;import java.util.Map;import com.ifeve.book.forkjoin.CopyOnWriteMap;/** * 黑名单服务 * * @author fangtengfei * */public class BlackListServiceImpl &#123; private static CopyOnWriteMap&lt;String, Boolean&gt; blackListMap = new CopyOnWriteMap&lt;String, Boolean&gt;( 1000); public static boolean isBlackList(String id) &#123; return blackListMap.get(id) == null ? false : true; &#125; public static void addBlackList(String id) &#123; blackListMap.put(id, Boolean.TRUE); &#125; /** * 批量添加黑名单 * * @param ids */ public static void addBlackList(Map&lt;String,Boolean&gt; ids) &#123; blackListMap.putAll(ids); &#125;&#125; 代码很简单，但是使用CopyOnWriteMap需要注意两件事情： 减少扩容开销。根据实际需要，初始化CopyOnWriteMap的大小，避免写时CopyOnWriteMap扩容的开销。 使用批量添加。因为每次添加，容器每次都会进行复制，所以减少添加次数，可以减少容器的复制次数。如使用上面代码里的addBlackList方法。 CopyOnWrite的缺点 CopyOnWrite容器有很多优点，但是同时也存在两个问题，即内存占用问题和数据一致性问题。所以在开发的时候需要注意一下。 内存占用问题。因为CopyOnWrite的写时复制机制，所以在进行写操作的时候，内存里会同时驻扎两个对象的内存，旧的对象和新写入的对象（注意:在复制的时候只是复制容器里的引用，只是在写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存）。如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。之前我们系统中使用了一个服务由于每晚使用CopyOnWrite机制更新大对象，造成了每晚15秒的Full GC，应用响应时间也随之变长。 针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。 数据一致性问题。CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。 关于C++的STL中，曾经也有过Copy-On-Write的玩法，参见陈皓的《C++ STL String类中的Copy-On-Write》，后来，因为有很多线程安全上的事，就被去掉了。 来源：聊聊并发（四）深入分析ConcurrentHashMap","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"https://beausoft.github.io/tags/多线程/"}]},{"title":"并发工具类（一）等待多线程完成的CountDownLatch","slug":"并发工具类（一）等待多线程完成的CountDownLatch","date":"2018-03-06T14:41:28.000Z","updated":"2018-03-06T14:53:48.785Z","comments":true,"path":"2018/03/06/并发工具类（一）等待多线程完成的CountDownLatch/","link":"","permalink":"https://beausoft.github.io/2018/03/06/并发工具类（一）等待多线程完成的CountDownLatch/","excerpt":"","text":"简介 CountDownLatch 允许一个或多个线程等待其他线程完成操作。 应用场景 假如有这样一个需求，当我们需要解析一个Excel里多个sheet的数据时，可以考虑使用多线程，每个线程解析一个sheet里的数据，等到所有的sheet都解析完之后，程序需要提示解析完成。在这个需求中，要实现主线程等待所有线程完成sheet的解析操作，最简单的做法是使用join。代码如下： 123456789101112131415161718192021222324public class JoinCountDownLatchTest &#123; public static void main(String[] args) throws InterruptedException &#123; Thread parser1 = new Thread(new Runnable() &#123; @Override public void run() &#123; &#125; &#125;); Thread parser2 = new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(\"parser2 finish\"); &#125; &#125;); parser1.start(); parser2.start(); parser1.join(); parser2.join(); System.out.println(\"all parser finish\"); &#125;&#125; join用于让当前执行线程等待join线程执行结束。其实现原理是不停检查join线程是否存活，如果join线程存活则让当前线程永远wait，代码片段如下，wait(0)表示永远等待下去。 123while (isAlive()) &#123; wait(0);&#125; 直到join线程中止后，线程的this.notifyAll会被调用，调用notifyAll是在JVM里实现的，所以JDK里看不到，有兴趣的同学可以看看JVM源码。JDK不推荐在线程实例上使用wait，notify和notifyAll方法。 而在JDK1.5之后的并发包中提供的CountDownLatch也可以实现join的这个功能，并且比join的功能更多。 1234567891011121314151617181920public class CountDownLatchTest &#123; static CountDownLatch c = new CountDownLatch(2); public static void main(String[] args) throws InterruptedException &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(1); c.countDown(); System.out.println(2); c.countDown(); &#125; &#125;).start(); c.await(); System.out.println(\"3\"); &#125;&#125; CountDownLatch的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N。 当我们调用一次CountDownLatch的countDown方法时，N就会减1，CountDownLatch的await会阻塞当前线程，直到N变成零。由于countDown方法可以用在任何地方，所以这里说的N个点，可以是N个线程，也可以是1个线程里的N个执行步骤。用在多个线程时，你只需要把这个CountDownLatch的引用传递到线程里。 其他方法 如果有某个解析sheet的线程处理的比较慢，我们不可能让主线程一直等待，所以我们可以使用另外一个带指定时间的await方法，await(long time, TimeUnit unit): 这个方法等待特定时间后，就会不再阻塞当前线程。join也有类似的方法。 注意：计数器必须大于等于0，只是等于0时候，计数器就是零，调用await方法时不会阻塞当前线程。CountDownLatch不可能重新初始化或者修改CountDownLatch对象的内部计数器的值。一个线程调用countDown方法 happen-before 另外一个线程调用await方法。 来源：并发工具类（一）等待多线程完成的CountDownLatch","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://beausoft.github.io/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"https://beausoft.github.io/tags/多线程/"}]}]}